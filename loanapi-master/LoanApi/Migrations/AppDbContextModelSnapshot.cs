// <auto-generated />
using System;
using LoanApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoanApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LoanApi.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId");

                    b.Property<bool>("Alert");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Days");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Number");

                    b.Property<string>("Purpose")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("AccountId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("LoanApi.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("BaseType")
                        .IsRequired();

                    b.Property<string>("Code");

                    b.Property<int>("CotId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Days");

                    b.Property<int>("Dormant");

                    b.Property<string>("Frequency")
                        .IsRequired();

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NominalId");

                    b.Property<int>("SequenceId");

                    b.Property<string>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("AccountTypeId");

                    b.HasIndex("CotId");

                    b.HasIndex("NominalId");

                    b.HasIndex("SequenceId");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("LoanApi.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Auto");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<bool>("Name");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("AlertId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("LoanApi.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("LogOut");

                    b.Property<DateTime>("Login");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LoanApi.Models.Charge", b =>
                {
                    b.Property<int>("ChargeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("CotId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Method")
                        .IsRequired();

                    b.Property<string>("Reference");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ChargeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CotId");

                    b.ToTable("Charge");
                });

            modelBuilder.Entity("LoanApi.Models.Cheque", b =>
                {
                    b.Property<int>("ChequeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<int>("TransactionId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ChequeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Cheque");
                });

            modelBuilder.Entity("LoanApi.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("Expiry");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Postal")
                        .IsRequired();

                    b.Property<DateTime>("SessionDate");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("LoanApi.Models.Cot", b =>
                {
                    b.Property<int>("CotId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Frequency")
                        .IsRequired();

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NominalId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("CotId");

                    b.HasIndex("NominalId");

                    b.ToTable("Cot");
                });

            modelBuilder.Entity("LoanApi.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BusAddress");

                    b.Property<string>("BusType");

                    b.Property<string>("Business");

                    b.Property<string>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<int>("LocationId");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("MaritalStatus")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Nok");

                    b.Property<string>("NokAddress");

                    b.Property<string>("NokMobile");

                    b.Property<string>("Rnok");

                    b.Property<string>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LoanApi.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Nationality")
                        .IsRequired();

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<decimal>("Salary");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("LoanApi.Models.Garantor", b =>
                {
                    b.Property<int>("GarantorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("MaritalStatus")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("GarantorId");

                    b.HasIndex("AccountId");

                    b.ToTable("Garantor");
                });

            modelBuilder.Entity("LoanApi.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("LoanApi.Models.MainNominal", b =>
                {
                    b.Property<int>("MainNominalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("MainNominalId");

                    b.ToTable("MainNominal");
                });

            modelBuilder.Entity("LoanApi.Models.Nominal", b =>
                {
                    b.Property<int>("NominalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowJournal");

                    b.Property<string>("BalanceType")
                        .IsRequired();

                    b.Property<string>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("GLType")
                        .IsRequired();

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<int>("MainNominalId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("NominalId");

                    b.HasIndex("MainNominalId");

                    b.ToTable("Nominal");
                });

            modelBuilder.Entity("LoanApi.Models.Sequence", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Counter");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Length");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Prefix")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SequenceId");

                    b.ToTable("Sequence");
                });

            modelBuilder.Entity("LoanApi.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<DateTime>("SessionDate");

                    b.Property<string>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SessionId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("LoanApi.Models.Sms", b =>
                {
                    b.Property<int>("SmsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<int>("Code");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Response");

                    b.Property<string>("Type");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SmsId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("LoanApi.Models.SmsApi", b =>
                {
                    b.Property<int>("SmsApiId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Default");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("SenderId")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Url")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("SmsApiId");

                    b.ToTable("SmsApi");
                });

            modelBuilder.Entity("LoanApi.Models.SmsBoardcast", b =>
                {
                    b.Property<int>("SmsBoardcastId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired();

                    b.Property<string>("Option");

                    b.Property<string>("Response");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("SmsBoardcastId");

                    b.ToTable("SmsBoardcast");
                });

            modelBuilder.Entity("LoanApi.Models.Teller", b =>
                {
                    b.Property<int>("TellerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<int>("NominalId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TellerId");

                    b.HasIndex("Id");

                    b.HasIndex("NominalId");

                    b.ToTable("Teller");
                });

            modelBuilder.Entity("LoanApi.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Method")
                        .IsRequired();

                    b.Property<int>("NominalId");

                    b.Property<string>("Reference")
                        .IsRequired();

                    b.Property<string>("Source")
                        .IsRequired();

                    b.Property<int?>("TellerId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("NominalId");

                    b.HasIndex("TellerId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("LoanApi.Models.Transit", b =>
                {
                    b.Property<int>("TransitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("MDate");

                    b.Property<string>("MUserId");

                    b.Property<string>("Method")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NominalId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("TransitId");

                    b.HasIndex("NominalId");

                    b.ToTable("Transit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LoanApi.Models.Account", b =>
                {
                    b.HasOne("LoanApi.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Employee", "Employee")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.AccountType", b =>
                {
                    b.HasOne("LoanApi.Models.Cot", "Cot")
                        .WithMany("AccountTypes")
                        .HasForeignKey("CotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Nominal", "Nominal")
                        .WithMany()
                        .HasForeignKey("NominalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Sequence", "Sequence")
                        .WithMany()
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.AppUser", b =>
                {
                    b.HasOne("LoanApi.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("LoanApi.Models.Charge", b =>
                {
                    b.HasOne("LoanApi.Models.Account", "Account")
                        .WithMany("Charges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Cot", "Cot")
                        .WithMany("Charges")
                        .HasForeignKey("CotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Cheque", b =>
                {
                    b.HasOne("LoanApi.Models.Account", "Account")
                        .WithMany("Cheque")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Cot", b =>
                {
                    b.HasOne("LoanApi.Models.Nominal", "Nominal")
                        .WithMany()
                        .HasForeignKey("NominalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Customer", b =>
                {
                    b.HasOne("LoanApi.Models.Location", "Location")
                        .WithMany("Customers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Garantor", b =>
                {
                    b.HasOne("LoanApi.Models.Account", "Account")
                        .WithMany("Garantors")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Nominal", b =>
                {
                    b.HasOne("LoanApi.Models.MainNominal", "MainNominal")
                        .WithMany()
                        .HasForeignKey("MainNominalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Sms", b =>
                {
                    b.HasOne("LoanApi.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("LoanApi.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("LoanApi.Models.Teller", b =>
                {
                    b.HasOne("LoanApi.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Nominal", "Nominal")
                        .WithMany()
                        .HasForeignKey("NominalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LoanApi.Models.Transaction", b =>
                {
                    b.HasOne("LoanApi.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId");

                    b.HasOne("LoanApi.Models.Nominal", "Nominal")
                        .WithMany("Transactions")
                        .HasForeignKey("NominalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.Teller", "Teller")
                        .WithMany("Transactions")
                        .HasForeignKey("TellerId");
                });

            modelBuilder.Entity("LoanApi.Models.Transit", b =>
                {
                    b.HasOne("LoanApi.Models.Nominal", "Nominal")
                        .WithMany()
                        .HasForeignKey("NominalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LoanApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LoanApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LoanApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LoanApi.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
