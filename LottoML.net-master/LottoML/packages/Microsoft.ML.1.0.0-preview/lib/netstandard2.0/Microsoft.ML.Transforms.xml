<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.Transforms</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ML.CategoricalCatalog">
            <summary>
            The catalog of categorical transformations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,System.String,System.String,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,Microsoft.ML.IDataView)">
            <summary>
            Convert text columns into one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="outputKind">Output kind: Bag (multi-set vector), Ind (indicator vector), Key (index), or Binary encoded indicator vector.</param>
            <param name="maximumNumberOfKeys">Maximum number of terms to keep per column when auto-training.</param>
            <param name="keyOrdinality">How items should be ordered when vectorized. If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/> choosen they will be in the order encountered.
            If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, items are sorted according to their default comparison, for example, text sorting will be case sensitive (for example, 'A' then 'Z' then 'a').</param>
            <param name="keyData">Specifies an ordering for the encoding. If specified, this should be a single column data view,
            and the key-values will be taken from that column. If unspecified, the ordering will be determined from the input data upon fitting.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[RPCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Categorical/OneHotEncoding.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,Microsoft.ML.InputOutputColumnPair[],Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,Microsoft.ML.IDataView)">
            <summary>
            Convert text columns into one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">Specifies the names of the columns on which to apply the transformation.</param>
            <param name="outputKind">Output kind: Bag (multi-set vector), Ind (indicator vector), Key (index), or Binary encoded indicator vector.</param>
            <param name="maximumNumberOfKeys">Maximum number of terms to keep per column when auto-training.</param>
            <param name="keyOrdinality">How items should be ordered when vectorized. If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/> choosen they will be in the order encountered.
            If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, items are sorted according to their default comparison, for example, text sorting will be case sensitive (for example, 'A' then 'Z' then 'a').</param>
            <param name="keyData">Specifies an ordering for the encoding. If specified, this should be a single column data view,
            and the key-values will be taken from that column. If unspecified, the ordering will be determined from the input data upon fitting.</param>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,Microsoft.ML.Transforms.OneHotEncodingEstimator.ColumnOptions[])">
            <summary>
            Convert several text column into one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The column settings.</param>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,Microsoft.ML.Transforms.OneHotEncodingEstimator.ColumnOptions[],Microsoft.ML.IDataView)">
            <summary>
            Convert several text column into one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The column settings.</param>
            <param name="keyData">Specifies an ordering for the encoding. If specified, this should be a single column data view,
            and the key-values will be taken from that column. If unspecified, the ordering will be determined from the input data upon fitting.</param>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotHashEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,System.String,System.String,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Convert a text column into hash-based one-hot encoded vector.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="outputKind">The conversion mode.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotHashEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,Microsoft.ML.InputOutputColumnPair[],Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Convert text columns into hash-based one-hot encoded vector columns.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">Specifies the names of the columns on which to apply the transformation.</param>
            <param name="outputKind">The conversion mode.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.CategoricalCatalog.OneHotHashEncoding(Microsoft.ML.TransformsCatalog.CategoricalTransforms,Microsoft.ML.Transforms.OneHotHashEncodingEstimator.ColumnOptions[])">
            <summary>
            Convert several text column into hash-based one-hot encoded vectors.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The column settings.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.CountFeatureSelectingEstimator">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
        </member>
        <member name="T:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions.Name">
            <summary> Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions.InputColumnName"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions.InputColumnName">
            <summary> Name of the column to transform.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions.Count">
            <summary>If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Describes the parameters of the feature selection process for a column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions[])">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="env">The environment to use.</param>
            <param name="columns">Describes the parameters of the feature selection process for each column pair.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CountFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="env">The environment to use.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="minCount">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CountFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectingEstimator.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.CountFeatureSelectingEstimator.Options,Microsoft.ML.IDataView)">
            <summary>
            Create method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CountFeatureSelectionUtils.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String[],System.Int32[]@)">
            <summary>
            Returns the feature selection scores for each slot of each column.
            </summary>
            <param name="env">The host environment.</param>
            <param name="input">The input dataview.</param>
            <param name="columns">The columns for which to compute the feature selection scores.</param>
            <param name="colSizes">Outputs an array containing the vector sizes of the input columns</param>
            <returns>A list of scores.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.CustomMappingFactoryAttributeAttribute">
            <summary>
            Place this attribute onto a type to cause it to be considered a custom mapping factory.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.CustomMappingFactory`2">
            <summary>
            The base type for custom mapping factories.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingFactory`2.GetMapping">
            <summary>
            Returns the mapping delegate that maps from <typeparamref name="TSrc"/> inputs to <typeparamref name="TDst"/> outputs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.CustomMappingTransformer`2">
            <summary>
            This transform generates additional columns to the provided <see cref="T:Microsoft.ML.IDataView"/>.
            It doesn't change the number of rows, and can be seen as a result of application of the user's function
            to every row of the input data.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Transforms.CustomMappingTransformer`2.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingTransformer`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Action{`0,`1},System.String,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a custom mapping of input columns to output columns.
            </summary>
            <param name="env">The host environment</param>
            <param name="mapAction">The action by which we map source to destination columns</param>
            <param name="contractName">The name of the action (will be saved to the model).</param>
            <param name="inputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TSrc"/> and input data.</param>
            <param name="outputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TDst"/> and output data.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingTransformer`2.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.DataViewSchema"/> which would be produced by the transformer applied to
            an input data with schema <paramref name="inputSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingTransformer`2.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingTransformer`2.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception is thrown. If the <paramref name="inputSchema"/> is in any way
            unsuitable for constructing the mapper, an exception is likewise thrown.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.CustomMappingEstimator`2">
            <summary>
            The <see cref="T:Microsoft.ML.IEstimator`1"/> to define a custom mapping of rows of an <see cref="T:Microsoft.ML.IDataView"/>.
            For usage details, please see <see cref="M:Microsoft.ML.CustomMappingCatalog.CustomMapping``2(Microsoft.ML.TransformsCatalog,System.Action{``0,``1},System.String,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)"/>
            </summary>
            <remarks>
            Calling <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/> in this estimator, produces an <see cref="T:Microsoft.ML.Transforms.CustomMappingTransformer`2"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingEstimator`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Action{`0,`1},System.String,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a custom mapping of input columns to output columns.
            </summary>
            <param name="env">The host environment</param>
            <param name="mapAction">The mapping action. This must be thread-safe and free from side effects.</param>
            <param name="contractName">The contract name, used by ML.NET for loading the model. If <c>null</c> is specified, such a trained model would not be save-able.</param>
            <param name="inputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TSrc"/> and input data.</param>
            <param name="outputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TDst"/> and output data.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.CustomMappingEstimator`2.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextAnalytics">
            <summary>
            Entry points for text anylytics transforms.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.ModelParameters">
            <summary>
            Provide details about the topics discovered by <a href="https://arxiv.org/abs/1412.1576">LightLDA.</a>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer.LdaState[],System.Collections.Generic.List{Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer"/> object.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="ldas">An array of LdaState objects, where ldas[i] is learnt from the i-th element of <paramref name="columns"/>.</param>
            <param name="columnMappings">A list of mappings, where columnMapping[i] is a map of slot names for the i-th element of <paramref name="columns"/>.</param>
            <param name="columns">Describes the parameters of the LDA process for each column pair.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="numberOfTopics">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="samplingStepCount">Number of Metropolis Hasting step.</param>
            <param name="maximumNumberOfIterations">Number of iterations.</param>
            <param name="numberOfThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="maximumTokenCountPerDocument">The threshold of maximum count of tokens per doc.</param>
            <param name="numberOfSummaryTermsPerTopic">The number of words to summarize the topic.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numberOfBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions[])">
            <summary>
        The LDA transform implements LightLDA, a state-of-the-art implementation of Latent Dirichlet Allocation.
      </summary><remarks>
        Latent Dirichlet Allocation is a well-known topic modeling algorithm that infers topical structure from text data,
        and can be used to featurize any text fields as low-dimensional topical vectors. 
        <para>LightLDA is an extremely efficient implementation of LDA developed in MSR-Asia that incorporates a number of 
         optimization techniques. See <a href="https://arxiv.org/abs/1412.1576">LightLDA: Big Topic Models on Modest Compute Clusters</a>.
        </para>
        <para>
          With the LDA transform, ML.NET users can train a topic model to produce 1 million topics with 1 million vocabulary
          on a 1-billion-token document set one a single machine in a few hours (typically, LDA at this scale takes days and requires large clusters).
          The most significant innovation is a super-efficient O(1) <a href="https://en.wikipedia.org/wiki/Metropolis–Hastings_algorithm">Metropolis-Hastings sampling algorithm</a>,
          whose running cost is (surprisingly) agnostic of model size,
          allowing it to converges nearly an order of magnitude faster than other <a href="https://en.wikipedia.org/wiki/Gibbs_sampling">Gibbs samplers.</a>
        </para>
        <para>
          For more details please see original LightLDA paper, and its open source implementation. 
          <list type="bullet">
            <item><description><a href="https://arxiv.org/abs/1412.1576"> LightLDA: Big Topic Models on Modest Computer Clusters</a></description></item>
            <item><description><a href=" https://github.com/Microsoft/LightLDA">LightLDA </a></description></item>
          </list>
        </para>
      </remarks>
            <param name="env">The environment.</param>
            <param name="columns">Describes the parameters of the LDA process for each column pair.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.Name">
            <summary>
            Name of the column resulting from the transformation of <cref see="InputColumnName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.InputColumnName">
            <summary>
            Name of column to transform.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.NumberOfTopics">
            <summary>
            The number of topics.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.AlphaSum">
            <summary>
            Dirichlet prior on document-topic vectors.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.Beta">
            <summary>
            Dirichlet prior on vocab-topic vectors.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.SamplingStepCount">
            <summary>
            Number of Metropolis Hasting step.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.NumberOfIterations">
            <summary>
            Number of iterations.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.LikelihoodInterval">
            <summary>
            Compute log likelihood over local dataset on this iteration interval.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.NumberOfThreads">
            <summary>
            The number of training threads.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.MaximumTokenCountPerDocument">
            <summary>
            The threshold of maximum count of tokens per doc.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.NumberOfSummaryTermsPerTopic">
            <summary>
            The number of words to summarize the topic.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.NumberOfBurninIterations">
            <summary>
            The number of burn-in iterations.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.ResetRandomGenerator">
            <summary>
            Reset the random number generator for each document.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions.#ctor(System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">The column containing the output scores over a set of topics, represented as a vector of floats. </param>
            <param name="inputColumnName">The column representing the document as a vector of floats.A null value for the column means <paramref name="inputColumnName"/> is replaced. </param>
            <param name="numberOfTopics">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="samplingStepCount">Number of Metropolis Hasting step.</param>
            <param name="maximumNumberOfIterations">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numberOfThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="maximumTokenCountPerDocument">The threshold of maximum count of tokens per doc.</param>
            <param name="numberOfSummaryTermsPerTopic">The number of words to summarize the topic.</param>
            <param name="numberOfBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.Text.LatentDirichletAllocationTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
            It does so by hashing each ngram and using the hash value as the index in the bag.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions[])">
            <summary>
            Constructor for case where you don't need to 'train' transform on data, for example, MaximumNumberOfInverts for all columns set to zero.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="columns">Description of dataset columns and how to process them.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator">
             <summary>
             Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
             It does so by hashing each ngram and using the hash value as the index in the bag.
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one pair of mulitple inputs - singular output columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.Name">
            <summary>Name of the column resulting from the transformation of <see cref="P:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.InputColumnNames"/>.</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.InputColumnNames">
            <summary>Names of the columns to transform.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.NgramLength">
            <summary>Maximum ngram length.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.SkipLength">
            <summary>Maximum number of tokens to skip when constructing an ngram.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.UseAllLengths">
            <summary>Whether to store all ngram lengths up to <see cref="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.NgramLength"/>, or only <see cref="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.NgramLength"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.NumberOfBits">
            <summary>Number of bits to hash into. Must be between 1 and 31, inclusive.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.Seed">
            <summary>Hashing seed.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.UseOrderedHashing">
            <summary>Whether the position of each term should be included in the hash.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.MaximumNumberOfInverts">
            <summary>
            During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.
            Hashing, as such, can map many initial values to one.
            <see cref="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.MaximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.RehashUnigrams">
            <summary>Whether to rehash unigrams.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.#ctor(System.String,System.String[],System.Int32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Describes how the transformer maps several input columns, <paramref name="inputColumnNames"/>, to a output column, <paramref name="name"/>.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.</param>
            <param name="inputColumnNames">Names of the columns to transform. </param>
            <param name="ngramLength">Maximum ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to store all ngram lengths up to <paramref name="ngramLength"/>, or only <paramref name="ngramLength"/>.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the metadata for the new column.
            Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
            <param name="rehashUnigrams">Whether to rehash unigrams.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName"/>
             and outputs ngram vector as <paramref name="outputColumnName"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="outputColumnName">Name of output column, will contain the ngram vector. Null means <paramref name="inputColumnName"/> is replaced.</param>
             <param name="inputColumnName">Name of input column containing tokenized text.</param>
             <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames"/>
             and outputs ngram vector as <paramref name="outputColumnName"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="outputColumnName">Name of output column, will contain the ngram vector.</param>
             <param name="inputColumnNames">Name of input columns containing tokenized text.</param>
             <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions[])">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
             and outputs ngram vector for each output in <paramref name="columns.output.output"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="env">The environment.</param>
             <param name="columns">Array of columns which specifies the behavior of the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramHashingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingTransformer">
            <summary>
            Produces a bag of counts of ngrams(sequences of consecutive values of length 1-n) in a given vector of keys.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator">
            <summary>
            Produces a bag of counts of ngrams(sequences of consecutive values of length 1-n) in a given vector of keys.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria">
            <summary>
            A statistical measure used to evaluate how important a word is to a document in a corpus.
            This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of n-grams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of n-grams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions[])">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Array of columns with information how to transform data.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.Name">
            <summary>Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.InputColumnName"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.InputColumnName">
            <summary>Name of column to transform.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.NgramLength">
            <summary>Maximum ngram length.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.SkipLength">
            <summary>Maximum number of tokens to skip when constructing an ngram.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.UseAllLengths">
            <summary>Whether to store all ngram lengths up to ngramLength, or only ngramLength.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.Weighting">
            <summary>The weighting criteria.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions._maximumNgramsCounts">
            <summary>
            Underlying state of <see cref="P:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.MaximumNgramsCounts"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.MaximumNgramsCounts">
            <summary>
            Contains the maximum number of terms (that is, n-grams) to store in the dictionary, for each level of n-grams,
            from n=1 (in position 0) up to n=<see cref="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.NgramLength"/> (in position <see cref="F:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.NgramLength"/>-1)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria,System.Int32)">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="ngramLength">Maximum ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to store all ngram lengths up to ngramLength, or only ngramLength.</param>
            <param name="weighting">The weighting criteria.</param>
            <param name="maximumNgramsCount">Maximum number of n-grams to store in the dictionary.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer">
            <summary>
        Uses a pretrained sentiment model to score input strings.
      </summary><remarks>
        <para>The Sentiment transform returns the probability that the sentiment of a natural text is positive. </para>
        <para>
          The model was trained with the <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">Sentiment-specific word embedding (SSWE)</a>  and NGramFeaturizer on Twitter sentiment data,
          similarly to the sentiment analysis part of the
          <a href="https://www.microsoft.com/cognitive-services/en-us/text-analytics-api">Text Analytics cognitive service</a>. 
          The transform outputs a score between 0 and 1 as a sentiment prediction 
          (where 0 is a negative sentiment and 1 is a positive sentiment).</para> 
          <para>Currently it supports only English.</para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.SentimentAnalyzingTransformer.AliasIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String[],System.Collections.Generic.KeyValuePair{System.String,System.String}[]@)">
            <summary>
            If any column names in <param name="colNames" /> are present in <param name="input" />, this
            method will create a transform that copies them to temporary columns. It will populate <param name="hiddenNames" />
            with an array of string pairs containing the original name and the generated temporary column name, respectively.
            </summary>
            <param name="env"></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer">
            <summary>
            A Stopword remover transform based on language-specific lists of stop words (most common words)
            from Office Named Entity Recognition project.
            The transform is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.Columns">
            <summary>
            Defines the behavior of the transformer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions[])">
            <summary>
            Stopword remover removes language-specific list of stop words (most common words).
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words from.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator">
            <summary>
            Stopword remover removes language-specific list of stop words (most common words)
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Options">
            <summary>
            Use stop words remover that can remove language-specific list of stop words (most common words) already defined in the system.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Options.Language">
            <summary>
            Language of the text dataset. 'English' is default.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.Name">
            <summary>Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.InputColumnName"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.InputColumnName">
            <summary>Name of the column to transform.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.Language">
            <summary>Language-specific stop words list.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.LanguageColumn">
            <summary>Optional column to use for languages. This overrides language value.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language,System.String)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="language">Language-specific stop words list.</param>
            <param name="languageColumn">Optional column to use for languages. This overrides language value.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language">
            <summary>
            Stopwords language. This enumeration is serialized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName"/>
            and outputs the token streams without stopwords as <paramref name="outputColumnName"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="language">Langauge of the input text column <paramref name="inputColumnName"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words on.</param>
            <param name="language">Langauge of the input text columns <paramref name="columns"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingTransformer">
            <summary>
            Custom stopword remover removes specified list of stop words.
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingTransformer.Columns">
            <summary>
            The names of the input output column pairs on which this transformation is applied.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.ValueTuple{System.String,System.String}[])">
            <summary>
            Custom stopword remover removes specified list of stop words.
            </summary>
            <param name="env">The environment.</param>
            <param name="stopwords">Array of words to remove.</param>
            <param name="columns">Pairs of columns to remove stop words from.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator">
            <summary>
            Custom stopword remover removes specified list of stop words.
            This is usually applied after tokenizing text, so it compares individual tokens
            (case-insensitive comparison) to the stopwords.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.Options">
            <summary>
            Use stop words remover that can removes language-specific list of stop words (most common words) already defined in the system.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.Options.StopWords">
            <summary>
            List of stop words to remove.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String[])">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName"/>
            and outputs the token streams without stopwords as <paramref name="outputColumnName"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="stopwords">Array of words to remove.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.String[])">
            <summary>
            Removes stop words from incoming token streams in input columns
            and outputs the token streams without stop words as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to remove stop words on.</param>
            <param name="stopwords">Array of words to remove.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.IStopWordsRemoverOptions">
            <summary>
            Defines the different type of stop words remover supported.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;TextFeaturizingEstimator &quot;]/*" />
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Language">
            <summary>
            Text language. This enumeration is serialized.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.NormFunction">
            <summary>
            Text vector normalizer kind.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.NormFunction.None">
            <summary>
            Use this to disable normalization.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.NormFunction.L1">
            <summary>
            L1-norm.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.NormFunction.L2">
            <summary>
            L2-norm.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.NormFunction.Infinity">
            <summary>
            Infinity-norm.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options">
            <summary>
            Advanced options for the <see cref="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options._stopWordsRemoverOptions">
            <summary>
            The underlying state of <see cref="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.StopWordsRemover"/> and <see cref="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.StopWordsRemoverOptions"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.StopWordsRemoverOptions">
            <summary>
            Option to set type of stop word remover to use.
            The following options are available
            <list type="bullet">
                <item>
                    <description>The <see cref="T:Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Options"/> removes the language specific list of stop words from the input.</description>
                </item>
                <item>
                   <description>The <see cref="T:Microsoft.ML.Transforms.Text.CustomStopWordsRemovingEstimator.Options"/> uses user provided list of stop words.</description>
                </item>
            </list>
            Setting this to 'null' does not remove stop words from the input.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options._wordFeatureExtractor">
            <summary>
            The underlying state of <see cref="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.WordFeatureExtractorFactory"/> and <see cref="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.WordFeatureExtractor"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.Norm">
            <summary>
            Norm of the output vector. It will be normalized to one.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.WordFeatureExtractor">
            <summary>
            Ngram feature extractor to use for words (WordBag/WordHashBag).
            Set to <see langword="null" /> to turn off n-gram generation for words.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options._charFeatureExtractor">
            <summary>
            The underlying state of <see cref="F:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.CharFeatureExtractorFactory"/> and <see cref="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.CharFeatureExtractor"/>
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options.CharFeatureExtractor">
            <summary>
            Ngram feature extractor to use for characters (WordBag/WordHashBag).
            Set to <see langword="null" /> to turn off n-gram generation for characters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.TransformApplierParams">
            <summary>
            A distilled version of the TextFeaturizingEstimator  Arguments, with all fields marked readonly and
            only the exact set of information needed to construct the transforms preserved.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextNormalizingTransformer">
            <summary>
            A text normalization transform that allows normalizing text case, removing diacritical marks, punctuation marks and/or numbers.
            The transform operates on text input as well as vector of tokens/text (vector of ReadOnlyMemory).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.TextNormalizingTransformer.Columns">
            <summary>
            The names of the output and input column pairs on which the transformation is applied.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingTransformer.Mapper.IsCombiningDiacritic(System.Char)">
            <summary>
            Whether a character is a combining diacritic character or not.
            Combining diacritic characters are the set of diacritics intended to modify other characters.
            The list is provided by Office NL team.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode">
            <summary>
            Case normalization mode of text. This enumeration is serialized.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode.Lower">
            <summary>
            Make the output characters lowercased.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode.Upper">
            <summary>
            Make the output characters uppercased.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode.None">
            <summary>
            Do not change the case of output characters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Normalizes incoming text in <paramref name="inputColumnName"/> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumnName"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="caseMode">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode,System.Boolean,System.Boolean,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Normalizes incoming text in input columns by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="caseMode">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
            <param name="columns">Pairs of columns to run the text normalization on.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TextNormalizingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer">
            <summary>
            Character-oriented tokenizer where text is considered a sequence of characters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02"/>, to the beginning,
            and append another marker character, <see langword="0x03"/>, to the end of the output vector of characters.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Columns">
            <summary>
            The names of the output and input column pairs on which the transformation is applied.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersTransformer.Mapper.GetKeyValues(System.Int32,Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}@)">
            <summary>
            Get the key values (chars) corresponding to keys in the output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator">
            <summary>
            Character tokenizer splits text into sequences of characters using a sliding window.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Boolean)">
            <summary>
            Tokenize incoming text in <paramref name="inputColumnName"/> and output the tokens as <paramref name="outputColumnName"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02"/>, to the beginning,
            and append another marker character, <see langword="0x03"/>, to the end of the output vector of characters.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="env">The environment.</param>
            <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02"/>, to the beginning,
            and append another marker character, <see langword="0x03"/>, to the end of the output vector of characters.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.TokenizingByCharactersEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.SignatureNgramExtractorFactory">
            <summary>
            Signature for creating an INgramExtractorFactory.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.ExtractorColumn">
            <summary>
            A many-to-one column common to both <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform"/>
            and <see cref="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform">
            <summary>
            A transform that turns a collection of tokenized text (vector of ReadOnlyMemory), or vectors of keys into numerical
            feature vectors. The feature vectors are counts of ngrams (sequences of consecutive *tokens* -words or keys-
            of length 1-n).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform.ArgumentsBase">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Options"/> and
            <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractingTransformer.Options"/>, with the allLength option removed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.TermLoaderArguments">
            <summary>
            Arguments for defining custom list of terms or data file containing the terms.
            The class includes a subset of <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer"/>'s arguments.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory">
            <summary>
            An ngram extractor factory interface to create an ngram extractor transform.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.INgramExtractorFactory.UseHashingTrick">
            <summary>
            Whether the extractor transform created by this factory uses the hashing trick
            (by using <see cref="T:Microsoft.ML.Transforms.HashingTransformer"/> or <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer"/>, for example).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramExtractorFactory">
            <summary>
            An implementation of <see cref="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory"/> to create <see cref="T:Microsoft.ML.Transforms.Text.NgramExtractorTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractorFactory">
            <summary>
            An implementation of <see cref="T:Microsoft.ML.Transforms.Text.INgramExtractorFactory"/> to create <see cref="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.NgramExtractionUtils.GenerateUniqueSourceNames(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ManyToOneColumn[],Microsoft.ML.DataViewSchema)">
            <summary>
            Generates and returns unique names for columns source. Each element of the returned array is
            an array of unique source names per specific column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind)">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer"/> using the pretrained word embedding model specified by <paramref name="modelKind"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="modelKind">The pretrained word embedding model.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer"/> using the custom word embedding model by loading it from the file specified by the <paramref name="customModelFile"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="customModelFile">Filename for custom word embedding model.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions[])">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer"/> using the pretrained word embedding model specified by <paramref name="modelKind"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="modelKind">The pretrained word embedding model.</param>
            <param name="columns">Input/Output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions[])">
            <summary>
            Instantiates <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer"/> using the custom word embedding model by loading it from the file specified by the <paramref name="customModelFile"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="customModelFile">Filename for custom word embedding model.</param>
            <param name="columns">Input/Output columns.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind)">
            <summary>
            Extracts word embeddings.
            Output three times more values than dimension of the model specified in <paramref name="modelKind"/>
            First set of values represent minumum encountered values (for each dimension), second set represent average (for each dimension)
            and third one represent maximum encountered values (for each dimension).
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind"/> to use. </param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Extracts word embeddings.
            Output three times more values than dimension of the model specified in <paramref name="customModelFile"/>
            First set of values represent minumum encountered values (for each dimension), second set represent average (for each dimension)
            and third one represent maximum encountered values (for each dimension).
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
            <param name="inputColumnName">Name of the column to transform. </param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions[])">
            <summary>
            Extracts word embeddings.
            Output three times more values than dimension of the model specified in <paramref name="modelKind"/>
            First set of values represent minumum encountered values (for each dimension), second set represent average (for each dimension)
            and third one represent maximum encountered values (for each dimension).
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind"/> to use. </param>
            <param name="columns">The array columns, and per-column configurations to extract embeedings from.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind">
            <summary>
            Specifies which word embeddings to use.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions">
            <summary>
            Information for each column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions.Name">
            <summary>
            Name of the column resulting from the transformation of <cref see="InputColumnName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions.InputColumnName">
            <summary>
            Name of column to transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions.#ctor(System.String,System.String)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <cref see="inputColumnName"/>. </param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/> <cref see="name"/> will be used as source.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer">
            <summary>
            A transform that turns a collection of tokenized text (vector of ReadOnlyMemory) into numerical feature vectors
            using the hashing trick.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.NgramHashExtractingTransformer.ArgumentsBase">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.HashingTransformer.Options"/> and
            <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingTransformer.Options"/>, with the ordered option,
            the rehashUnigrams option and the allLength option removed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordTokenizingTransformer">
            <summary>
        This transform splits the text into words using the separator character(s).
      </summary><remarks>
        The input for this transform is a ReadOnlyMemory or a vector of ReadOnlyMemory,
        and its output is a vector of ReadOnlyMemory, corresponding to the tokens in the input text.
        The output is generated by splitting the input text, using a set of user specified separator characters.
        Empty strings and strings containing only spaces are dropped.
        This transform is not typically used on its own, but it is one of the transforms composing the Text Featurizer.
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordTokenizingEstimator">
            <summary>
            Word tokenizer splits text into tokens using the delimiter.
            For each text input, the output column is a variable vector of text.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Char[])">
            <summary>
            Tokenize incoming text in <paramref name="inputColumnName"/> and output the tokens as <paramref name="outputColumnName"/>.
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Char[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions[])">
            <summary>
             Tokenize incoming text in input columns and output the tokens.
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.Name">
            <summary>
            Output column name that will be used to store the tokenization result of <see cref="F:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.InputColumnName"/> column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.InputColumnName">
            <summary>
            Input column name that will be tokenized into words.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.Separators">
            <summary>
            Seperator list used to tokenize input string. If not specified, space will be used.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.SeparatorsArray">
            <summary>
            State of <see cref="P:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.Separators"/>. Since <see langword="char"/>[] is multable, it's not safe to directly expose this field to users.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Char[])">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="separators">Casing text using the rules of the invariant culture. If not specified, space will be used as separator.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordTokenizingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordBagEstimator">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in a given text.
            It does so by building a dictionary of ngrams and using the id in the dictionary as the index in the bag.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordBagEstimator.Options">
            <summary>
            Options for how the ngrams are extracted.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordBagEstimator.Options.NgramLength">
            <summary>
            Maximum ngram length.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordBagEstimator.Options.SkipLength">
            <summary>
            Maximum number of tokens to skip when constructing an ngram.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordBagEstimator.Options.UseAllLengths">
            <summary>
            Whether to store all ngram lengths up to ngramLength, or only ngramLength.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordBagEstimator.Options.MaximumNgramsCount">
            <summary>
            The maximum number of grams to store in the dictionary, for each level of ngrams,
            from 1 (in position 0) up to ngramLength (in position ngramLength-1)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.Text.WordBagEstimator.Options.Weighting">
            <summary>
            The weighting criteria.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnNames"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">The column containing output tokens.</param>
            <param name="inputColumnNames">The columns containing text to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String[]}[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.Fit(Microsoft.ML.IDataView)">
            <summary> Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordBagEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for estimators.
            Returns the output schema shape of the estimator, if the input schema shape is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words of length 1-n) in a given text.
            It does so by hashing each ngram and using the hash value as the index in the bag.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">The column containing bag of word vector. Null means <paramref name="inputColumnName"/> is replaced.</param>
            <param name="inputColumnName">The column containing text to compute bag of word vector.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="outputColumnName">The column containing output tokens.</param>
            <param name="inputColumnNames">The columns containing text to compute bag of word vector.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String[]}[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to compute bag of word vector.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.Fit(Microsoft.ML.IDataView)">
            <summary> Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.Text.WordHashBagEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for estimators.
            Returns the output schema shape of the estimator, if the input schema shape is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.SignatureKernelBase">
            <summary>
            Signature for a <see cref="T:Microsoft.ML.Transforms.KernelBase"/> constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KernelBase">
            <summary>
            This class indicates which kernel should be approximated by the <see cref="T:Microsoft.ML.Transforms.ApproximatedKernelTransformer"/>.
            <seealso cref="T:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KernelBase.Distance(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            The kernels deriving from this class are shift-invariant, and each of them depends on a different distance between
            its inputs. The <see cref="T:Microsoft.ML.Transforms.GaussianKernel"/> depends on the L2 distance, and the <see cref="T:Microsoft.ML.Transforms.LaplacianKernel"/> depends
            on the L1 distance.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KernelBase.GetRandomNumberGenerator(System.Single)">
            <summary>
            This method returns an object that can sample from the non-negative measure that is the Fourier transform of this kernel.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.FourierRandomNumberGeneratorBase">
            <summary>
            The Fourier transform of a continuous positive definite kernel is a non-negative measure
            (<a href="https://en.wikipedia.org/wiki/Bochner%27s_theorem">Bochner's theorem</a>). This class
            samples numbers from the non-negative measure corresponding to the given kernel.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GaussianKernel">
            <summary>
            The Gaussian kernel is defined as k(x,y)=exp(-gamma*|x-y|_2^2). The distribution that is the Fourier transform of
            this kernel is the Normal distribution with variance 2*gamma.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GaussianKernel.#ctor(System.Single)">
            <summary>
            Create a new instance of a GaussianKernel.
            </summary>
            <param name="gamma">The coefficient in the exponent of the kernel function. It should be positive.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.LaplacianKernel">
            <summary>
            The Laplacian kernel is defined as k(x,y)=exp(-a*|x-y|_1). The distribution that is the Fourier transform of this
            kernel is the Cauchy distribution with parameters (0, a).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LaplacianKernel.#ctor(System.Single)">
            <summary>
            Create a new instance of a LaplacianKernel.
            </summary>
            <param name="a">The coefficient in the exponent of the kernel function</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingTransformer">
            <summary>
            Lp-Norm (vector/row-wise) normalization transform. Has the following two set of arguments:
            1- Lp-Norm normalizer arguments:
               Normalize rows individually by rescaling them to unit norm (L2, L1 or LInf).
               Performs the following operation on a vector X:
                    Y = (X - M) / D, where M is mean and D is either L2 norm, L1 norm or LInf norm.
               Scaling inputs to unit norms is a common operation for text classification or clustering.
            2- Global contrast normalization (GCN) arguments:
               Performs the following operation on a vector X:
                    Y = (s * X - M) / D, where s is a scale, M is mean and D is either L2 norm or standard deviation.
               Usage examples and Matlab code:
               <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf</a>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Columns">
            <summary>
            The objects describing how the transformation is applied on the input data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.LpNormNormalizingTransformer"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.StdDev(System.ReadOnlySpan{System.Single},System.Int32)">
            <summary>
            Compute Standard Deviation. In case of both subMean and useStd are true, we technically need to compute variance
            based on centered values (i.e. after subtracting the mean). But since the centered
            values mean is approximately zero, we can use variance of non-centered values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.StdDev(System.ReadOnlySpan{System.Single},System.Int32,System.Single)">
            <summary>
            Compute Standard Deviation.
            We have two overloads of StdDev instead of one with <see cref="T:System.Nullable`1"/> mean for perf reasons.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.L2Norm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute L2-norm. L2-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.L1Norm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute L1-norm. L1-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingTransformer.Mapper.LInfNorm(System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Compute LInf-norm. LInf-norm computation doesn't subtract the mean from the source values.
            However, we substract the mean here in case subMean is true (if subMean is false, mean is zero).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase">
            <summary>
            Base estimator class for LpNorm and Gcn normalizers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction">
            <summary>
            The kind of unit norm vectors are rescaled to. This enumeration is serialized.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction.L2">
            <summary>
            L2-norm.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction.StandardDeviation">
            <summary>
            Standard deviation of a vector by viewing all its coordinates as a random variable.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction.L1">
            <summary>
            L1-norm.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction.Infinity">
            <summary>
            Infinity-norm.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase">
            <summary>
            Describes base class for one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.Name">
            <summary>
            Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.InputColumnName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.InputColumnName">
            <summary>
            Name of column to transform.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.Norm">
            <summary>
            The norm to use to normalize each sample.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.EnsureZeroMean">
            <summary>
            Subtract mean from each value before normalizing.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase.Scale">
            <summary>
            Scale features by this value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.ColumnOptionsBase[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingEstimator">
            <summary>
            Lp Normalizing estimator takes columns and normalizes them individually by rescaling them to unit norm.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LpNormNormalizingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="norm">Type of norm to use to normalize each sample. The indicated norm of the resulted vector will be normalized to one.</param>
            <param name="ensureZeroMean">If <see langword="true"/>, subtract mean from each value before normalizing and use the raw input otherwise.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;LpNormalize&quot;]/*" />
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="norm">Type of norm to use to normalize each sample. The indicated norm of the resulted vector will be normalized to one.</param>
            <param name="ensureZeroMean">If <see langword="true" />, subtract mean from each value before normalizing and use the raw input otherwise.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;LpNormalize&quot;]/*" />
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the normalization on.</param>
            <param name="norm">Type of norm to use to normalize each sample. The indicated norm of the resulted vector will be normalized to one.</param>
            <param name="ensureZeroMean">If <see langword="true" />, subtract mean from each value before normalizing and use the raw input otherwise.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.LpNormNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.LpNormNormalizingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.LpNormNormalizingEstimator"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator">
            <summary>
            Global contrast normalizing estimator takes columns and performs global constrast normalization.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="ensureZeroMean">If <see langword="true"/>, subtract mean from each value before normalizing and use the raw input otherwise.</param>
            <param name="ensureUnitStandardDeviation">If <see langword="true"/>, resulted vector's standard deviation would be one. Otherwise, resulted vector's L2-norm would be one.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
        <para>Performs a global contrast normalization on input values:</para>
        <para>Y = (s * X - M) / D</para> 
        <para>where s is a scale, M is mean and D is either the L2 norm or standard deviation.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: 
        <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">An Analysis of Single-Layer Networks in Unsupervised Feature Learning</a>
      </remarks><seealso cref="T:Microsoft.ML.Transforms.LpNormNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new GlobalContrastNormalizer("FeatureCol")
          { 
              SubMean= false
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="ensureZeroMean">If <see langword="true" />, subtract mean from each value before normalizing and use the raw input otherwise.</param>
            <param name="ensureUnitStandardDeviation">If <see langword="true" />, resulted vector's standard deviation would be one. Otherwise, resulted vector's L2-norm would be one.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[],System.Boolean,System.Boolean,System.Single)">
            <summary>
        <para>Performs a global contrast normalization on input values:</para>
        <para>Y = (s * X - M) / D</para> 
        <para>where s is a scale, M is mean and D is either the L2 norm or standard deviation.</para>
       </summary><remarks>
        Scaling inputs to unit norms is a common operation for text classification or clustering.
        For more information see: 
        <a href="https://www.cs.stanford.edu/~acoates/papers/coatesleeng_aistats_2011.pdf">An Analysis of Single-Layer Networks in Unsupervised Feature Learning</a>
      </remarks><seealso cref="T:Microsoft.ML.Transforms.LpNormNormalizingEstimator" /><example>
        <code language="csharp">
          pipeline.Add(new GlobalContrastNormalizer("FeatureCol")
          { 
              SubMean= false
          });
        </code>
      </example>
            <param name="env">The environment.</param>
            <param name="columns">Pairs of columns to run the normalization on.</param>
            <param name="ensureZeroMean">If <see langword="true" />, subtract mean from each value before normalizing and use the raw input otherwise.</param>
            <param name="ensureUnitStandardDeviation">If <see langword="true" />, resulted vector's standard deviation would be one. Otherwise, resulted vector's L2-norm would be one.</param>
            <param name="scale">Scale features by this value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform">
             <summary>
             A Trasforms that groups values of a scalar column into a vector, by a contiguous group ID.
             </summary>
             <remarks>
             <p>This transform essentially performs the following SQL-like operation:</p>
             <p>SELECT GroupKey1, GroupKey2, ... GroupKeyK, LIST(Value1), LIST(Value2), ... LIST(ValueN)
             FROM Data
             GROUP BY GroupKey1, GroupKey2, ... GroupKeyK.</p>
            
             <p>It assumes that the group keys are contiguous (if a new group key sequence is encountered, the group is over).
             The GroupKeyN and ValueN columns can be of any primitive types. The code requires that every raw type T of the group key column
             is an <see cref="T:System.IEquatable`1"/>, which is currently true for all existing primitive types.
             The produced ValueN columns will be variable-length vectors of the original value column types.</p>
            
             <p>The order of ValueN entries in the lists is preserved.</p>
            
             <example><code>
             Example:
             User Item
             Pete Book
             Tom  Table
             Tom  Kitten
             Pete Chair
             Pete Cup
            
             Result:
             User Item
             Pete [Book]
             Tom  [Table, Kitten]
             Pete [Chair, Cup]
             </code></example>
             </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.GroupTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="groupKey">Columns to group by</param>
            <param name="columns">Columns to group together</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.GroupBinding">
             <summary>
             This class describes the relation between <see cref="T:Microsoft.ML.Transforms.GroupTransform"/>'s input <see cref="T:Microsoft.ML.DataViewSchema"/>,
             <see cref="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding._inputSchema"/>, and output <see cref="T:Microsoft.ML.DataViewSchema"/>, <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/>.
            
             The <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/> contains columns used to group columns and columns being aggregated from input data.
             In <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/>, group columns are followed by aggregated columns. For example, if column "Age" is used to group "UserId" column,
             the first column and the second column in <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/> produced by <see cref="T:Microsoft.ML.Transforms.GroupTransform"/> would be "Age" and "UserId," respectively.
             Note that "Age" is a group column while "UserId" is an aggregated (also call keep) column.
            
             For group columns, the schema information is intact. For aggregated columns, the type is Vector of original type and variable length.
             The only metadata preserved is the KeyNames and IsNormalized. All other columns are dropped. Please see
             <see cref="M:Microsoft.ML.Transforms.GroupTransform.GroupBinding.BuildOutputSchema(Microsoft.ML.DataViewSchema)"/> how this idea got implemented.
             </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding.GroupColumnIndexes">
            <summary>
            <see cref="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding.GroupColumnIndexes"/>[i] is the i-th group(-key) column's column index in the source schema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding.KeepColumnIndexes">
            <summary>
            <see cref="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding.KeepColumnIndexes"/>[i] is the i-th aggregated column's column index in the source schema.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema">
            <summary>
            Output <see cref="T:Microsoft.ML.DataViewSchema"/> of <see cref="T:Microsoft.ML.Transforms.GroupTransform"/> when input schema is <see cref="F:Microsoft.ML.Transforms.GroupTransform.GroupBinding._inputSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.GroupBinding.BuildOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Compute the output schema of a <see cref="T:Microsoft.ML.Transforms.GroupTransform"/> given a input schema.
            </summary>
            <param name="sourceSchema">Input schema.</param>
            <returns>The associated output schema produced by <see cref="T:Microsoft.ML.Transforms.GroupTransform"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.GroupBinding.GetColumnIds(Microsoft.ML.DataViewSchema,System.String[],System.Func{System.String,System.Exception})">
            <summary>
            Given column names, extract and return column indexes from source schema.
            </summary>
            <param name="schema">Source schema</param>
            <param name="names">Column names</param>
            <param name="except">Marked exception function</param>
            <returns>column indexes</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.GroupBinding.CheckColumnInRange(System.Int32)">
            <summary>
            Determine if output column index is valid to <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/>. A valid output column index should be greater than or
            equal 0 and smaller than # of output columns.
            </summary>
            <param name="col">Column index of <see cref="P:Microsoft.ML.Transforms.GroupTransform.GroupBinding.OutputSchema"/></param>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor">
             <summary>
             This cursor will create two cursors on the input data view:
             - The leading cursor will activate all the group columns, and will advance until it hits the end of the contiguous group.
             - The trailing cursor will activate all the requested columns, and will go through the group
                 (as identified by the leading cursor), and aggregate the keep columns.
            
             The getters are as follows:
             - The group column getters are taken directly from the trailing cursor.
             - The keep column getters are provided by the aggregators.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor.GroupKeyColumnChecker">
            <summary>
            This class keeps track of the previous group key and tests the current group key against the previous one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GroupTransform.Cursor.KeepColumnAggregator">
            <summary>
            This class handles the aggregation of one 'keep' column into a vector. It wraps around an <see cref="T:Microsoft.ML.DataViewRow"/>'s
            column, reads the data and aggregates.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GroupTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.HashJoiningTransform">
            <summary>
            This transform hashes its input columns. Each column is hashed separately, and within each
            column there is an option to specify which slots should be hashed together into one output slot.
            This transform can be applied either to single valued columns or to known length vector columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ColumnOptions.GetItemType(System.Int32)">
            <summary>
            Constructs the correct KeyType for the given hash bits.
            Because of array size limitation, if numberOfBits = 31, the key type is not contiguous (not transformable into indicator array)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.HashJoiningTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the column to be transformed. If this is null '<paramref name="name"/>' will be used.</param>
            <param name="join">Whether the values need to be combined for a single hash.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.HashJoiningTransform.Arguments,Microsoft.ML.IDataView)">
            <summary>
        Converts multiple column values into hashes. 
        This transform accepts both numeric and text inputs, both single and vector-valued columns. 
      </summary><remarks>
        This transform can be helpful for ranking and cross-validation. In the case of ranking, where the GroupIdColumn column is required,
        and needs to be of a key type you can use the <see cref="T:Microsoft.ML.Transforms.CategoricalHashOneHotVectorizer" /> to hash the text value of a single GroupID column into a key value.
        If the GroupID is the combination of the values from multiple columns, you can use the HashConverter to hash multiple text columns into one key column. 
        Similarly with CrossValidator and the StratificationColumn. 
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeGetterOneToOne``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>
            </summary>
            <typeparam name="TSrc">Input type. Must be a non-vector</typeparam>
            <param name="input">Row inout</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeGetterVecToVec``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>, where output type is a vector of hashes
            </summary>
            <typeparam name="TSrc">Input type. Must be a vector</typeparam>
            <param name="input">Row input</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeGetterVecToOne``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for inputs of type <typeparamref name="TSrc"/>, where output type is a single hash
            </summary>
            <typeparam name="TSrc">Input type. Must be a vector</typeparam>
            <param name="input">Row input</param>
            <param name="iinfo">Index of the getter</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeHashDelegate``1">
            <summary>
            Generic hash function
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeFloatHashDelegate">
            <summary>
            Generate a specialized hash function for floats
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashJoiningTransform.ComposeDoubleHashDelegate">
            <summary>
            Generate a specialized hash function for doubles
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToBinaryVectorMappingTransformer">
            <summary>
             Converts the key types back to binary vectors.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.KeyToBinaryVectorMappingTransformer.Columns">
            <summary>
            The names of the output and input column pairs on which the transformation is performed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToBinaryVectorMappingTransformer.Mapper.MakeGetterOne(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            This is for the scalar case.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToBinaryVectorMappingTransformer.Mapper.MakeGetterInd(Microsoft.ML.DataViewRow,System.Int32,Microsoft.ML.Data.VectorDataViewType)">
            <summary>
            This is for the indicator case - vector input and outputs should be concatenated.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToBinaryVectorMappingEstimator">
            <summary>
             Converts the key types back to binary vectors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToBinaryVectorMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LambdaTransform">
            <summary>
            Utility class for creating transforms easily.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LambdaTransform.LoadDelegate">
            <summary>
            A delegate type to create a persistent transform, utilized by the creation functions
            as a callback to reconstitute a transform from binary data.
            </summary>
            <param name="reader">The binary stream from which the load is persisted</param>
            <param name="env">The host environment</param>
            <param name="input">The dataview this transform should be persisted on</param>
            <returns>A transform of the input data, as parameterized by the binary input
            stream</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.LambdaTransform.CreateMap``3(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Action{``0,``1,``2},System.Action{``2},Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            This is a 'stateful non-savable' version of the map transform: the mapping function is guaranteed to be invoked once per
            every row of the data set, in sequence; one user-defined state object will be allocated per cursor and passed to the
            map function every time. If <typeparamref name="TSrc"/>, <typeparamref name="TDst"/>, or
            <typeparamref name="TState"/> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
            <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
            <param name="env">The host environment to use.</param>
            <param name="source">The input data to apply transformation to.</param>
            <param name="mapAction">The function that performs the transformation. The function should transform its <typeparamref name="TSrc"/>
            argument into its <typeparamref name="TDst"/> argument and can utilize the per-cursor <typeparamref name="TState"/> state.</param>
            <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
            <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc"/> type.</param>
            <param name="outputSchemaDefinition">The optional output schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TDst"/> type.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.LambdaTransform.CreateFilter``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Func{``0,``1,System.Boolean},System.Action{``1},Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            This creates a filter transform that can 'accept' or 'decline' any row of the data based on the contents of the row
            or state of the cursor.
            This is a 'stateful non-savable' version of the filter: the filter function is guaranteed to be invoked once per
            every row of the data set, in sequence (non-parallelizable); one user-defined state object will be allocated per cursor and passed to the
            filter function every time.
            If <typeparamref name="TSrc"/> or <typeparamref name="TState"/> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
            <param name="env">The host environment to use.</param>
            <param name="source">The input data to apply transformation to.</param>
            <param name="filterFunc">The user-defined function that determines whether to keep the row or discard it. First parameter
            is the current row's contents, the second parameter is the cursor-specific state object.</param>
            <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
            <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc"/> type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.LambdaTransform.CreateFilter``2(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Func{``0,``1,System.Boolean},System.Action{``1},System.Action{System.IO.BinaryWriter},Microsoft.ML.Transforms.LambdaTransform.LoadDelegate,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            This creates a filter transform that can 'accept' or 'decline' any row of the data based on the contents of the row
            or state of the cursor.
            This is a 'stateful savable' version of the filter: the filter function is guaranteed to be invoked once per
            every row of the data set, in sequence (non-parallelizable); one user-defined state object will be allocated per cursor and passed to the
            filter function every time; save and load routines must be provided.
            If <typeparamref name="TSrc"/> or <typeparamref name="TState"/> implement the <see cref="T:System.IDisposable" /> interface, they will be disposed after use.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the
            input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TState">The type of the state object to allocate per cursor.</typeparam>
            <param name="env">The host environment to use.</param>
            <param name="source">The input data to apply transformation to.</param>
            <param name="filterFunc">The user-defined function that determines whether to keep the row or discard it. First parameter
            is the current row's contents, the second parameter is the cursor-specific state object.</param>
            <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
            <param name="saveAction">An action that allows us to save state to the serialization stream</param>
            <param name="loadFunc">A function that given the serialization stream and a data view, returns
            an <see cref="T:Microsoft.ML.Data.ITransformTemplate"/>. The intent is, this returned object should itself be the same
            as if we had recreated it using this method, but this is impossible to enforce. This transform
            will do its best to save a description of this method through assembly qualified names of the defining
            class, method name, and generic type parameters (if any), and then recover this same method on load,
            so it should be a static non-lambda method that this assembly can legally call.</param>
            <param name="inputSchemaDefinition">The optional input schema. If <c>null</c>, the schema is
            inferred from the <typeparamref name="TSrc"/> type.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.LambdaTransformBase">
             <summary>
             Defines common ancestor for various flavors of lambda-based user-defined transforms that may or may not be
             serializable.
            
             In order for the transform to be serializable, the user should specify a save and load delegate.
             Specifically, for this the user has to provide the following things:
              * a custom save action that serializes the transform 'state' to the binary writer.
              * a custom load action that de-serializes the transform from the binary reader. This must be a public static method of a public class.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LambdaTransformBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Transforms.LambdaTransformBase)">
            <summary>
            The 'reapply' constructor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LearnerFeatureSelectionTransform">
            <summary>
            Selects the slots for which the absolute value of the corresponding weight in a linear learner
            is greater than a threshold.
            Instantiates a DropSlots transform to actually drop the slots.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.Transforms.LearnerFeatureSelectionTransform.Options,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns a score for each slot of the features column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LoadTransform">
            <summary>
            Load specific transforms from the specified model file. Allows one to 'cherry pick' transforms from
            a serialized chain, or to apply a pre-trained transform to a different (but still compatible) data view.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LoadTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String[],System.Boolean)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.LoadTransform"/> for public facing API.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="modelFile">Model file to load the transforms from.</param>
            <param name="tag">The tags (comma-separated) to be loaded (or omitted, if complement is true).</param>
            <param name="complement">Whether to load all transforms except those marked by tags.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueDroppingTransformer">
            <member name="NADrop">
      <summary>
        Removes missing values from vector type columns.
      </summary>
    </member>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueDroppingTransformer.Columns">
            <summary>
            The names of the input columns of the transformation and the corresponding names for the output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueDroppingTransformer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.SaveModel(Microsoft.ML.ModelSaveContext)">
            <summary>
            Saves the transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueDroppingTransformer.Mapper.GetIsNADelegate(Microsoft.ML.Data.DataViewType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueHandlingTransformer">
            <!-- No matching elements were found for the following include tag --><include file="doc.xml" path="doc/members/member[@name=&quot;NAHandle&quot;]" />
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.DefaultValue">
            <summary>
            Replace with the default value of the column based on its type. For example, 'zero' for numeric and 'empty' for string/text columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Mean">
            <summary>
            Replace with the mean value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Minimum">
            <summary>
            Replace with the minimum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind.Maximum">
            <summary>
            Replace with the maximum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueHandlingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String,Microsoft.ML.Transforms.MissingValueHandlingTransformer.ReplacementKind)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.MissingValueHandlingTransformer"/> for public facing API.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="outputColumnName">Name of the output column.</param>
            <param name="inputColumnName">Name of the column to be transformed. If this is null '<paramref name="outputColumnName"/>' will be used.</param>
            <param name="replaceWith">The replacement method to utilize.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueHandlingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.MissingValueHandlingTransformer.Options,Microsoft.ML.IDataView)">
            Factory method for SignatureDataTransform.
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.MissingValueIndicatorTransform.Arguments,Microsoft.ML.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueIndicatorTransformer">
            <member name="NAIndicator">
      <summary>
        This transform can transform either scalars or vectors (both fixed and variable size),
        creating output columns that indicate, through the true/false booleans whether the row has a missing value.
      </summary>
    </member>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Columns">
            <summary>
            The names of the output and input column pairs for the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorTransformer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.SaveModel(Microsoft.ML.ModelSaveContext)">
            <summary>
            Saves the transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.GetIsNADelegate(Microsoft.ML.Data.DataViewType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.ComposeGetterOne(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for single valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.ComposeGetterVec(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for vector valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.FindNAs``1(Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.InPredicate{``0},System.Boolean,System.Collections.Generic.List{System.Int32},System.Boolean@)">
            <summary>
            Adds all NAs (or non-NAs) to the indices List.  Whether NAs or non-NAs have been added is indicated by the bool sense.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorTransformer.Mapper.FillValues(System.Int32,Microsoft.ML.Data.VBuffer{System.Boolean}@,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
             Fills indicator values for vectors.  The indices is a list that either holds all of the NAs or all
             of the non-NAs, indicated by sense being true or false respectively.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">The names of the input columns of the transformation and the corresponding names for the output columns.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.MissingValueIndicatorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueIndicatorEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer">
            <summary>
        Create an output column of the same type and size of the input column, 
        where missing values are replaced with either the default value or the mean/min/max value (for non-text columns only). 
      </summary><remarks>
        This transform can transform either scalars or vectors (both fixed and variable size),
        creating output columns that are identical to the input columns except for replacing NA values
        with either the default value, user input, or imputed values (min/max/mean are currently supported).
        Imputation modes are supported for vectors both by slot and across all slots.
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetReplacementValues(Microsoft.ML.IDataView,Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions[],System.Object[]@,System.Collections.BitArray[]@,Microsoft.ML.Data.DataViewType[]@)">
            <summary>
            Fill the repValues array with the correct replacement values based on the user-given replacement kinds.
            Vectors default to by-slot imputation unless otherwise specified, except for unknown sized vectors
            which force across-slot imputation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetIsNADelegate(Microsoft.ML.Data.DataViewType)">
            <summary>
            Returns the isNA predicate for the respective type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.GetSpecifiedValue(System.String,Microsoft.ML.Data.DataViewType,System.Delegate)">
            <summary>
            Converts a string to its respective value in the corresponding type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterOne(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for single valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterOne``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
             Replaces NA values for scalars.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterVec(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Getter generator for vector valued inputs.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.ComposeGetterVec``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
             Replaces NA values for vectors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.FillValues``1(Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.InPredicate{``0},``0,System.Boolean)">
            <summary>
             Fills values for vectors where there is one replacement value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Mapper.FillValues``1(Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.InPredicate{``0},``0[],System.Collections.BitArray)">
            <summary>
             Fills values for vectors where there is slot-wise replacement values.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator">
            <summary>
            The base class for stat aggregators for imputing mean, min, and max for the NAReplaceTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator`2">
            <summary>
            The base class for stat aggregators with knowledge of types.
            </summary>
            <typeparam name="TValue">The type for the column being aggregated.</typeparam>
            <typeparam name="TStat">The type of the stat being computed by the stat aggregator.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregator`2.RowCount">
            <summary>
            Returns the number of times that ProcessRow has been called.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.StatAggregatorAcrossSlots`2.ValueCount">
            <summary>
            Returns the number of values that have been processed so far.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MinMaxAggregatorAcrossSlots`2.ValuesProcessed">
            <summary>
            Returns the number of times that ProcessValue has been called.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MeanStatDouble">
            <summary>
            This is a mutable struct (so is evil). However, its scope is restricted
            and the only instances are in a field or an array, so the mutation does
            the right thing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.MeanStatInt">
            <summary>
            A mutable struct for keeping the appropriate statistics for mean calculations for IX types, TS, and DT,
            whose scope is restricted and only exists as an instance in a field or an array, utilizing the mutation
            of the struct correctly.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode">
            <summary>
            The possible ways to replace missing values.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.DefaultValue">
            <summary>
            Replace with the default value of the column based on its type. For example, 'zero' for numeric and 'empty' for string/text columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.Mean">
            <summary>
            Replace with the mean value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.Minimum">
            <summary>
            Replace with the minimum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.Maximum">
            <summary>
            Replace with the maximum value of the column. Supports only numeric/time span/ DateTime columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.Name">
            <summary> Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.InputColumnName"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.InputColumnName">
            <summary> Name of column to transform. </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.ImputeBySlot">
            <summary>
            If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.Replacement">
            <summary> How to replace the missing values.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.ReplacementString">
            <summary> Replacement value for missing values (only used in entrypoing and command line API).</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="replacementMode">How to replace the missing values.</param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode,System.Boolean,System.String)">
            <summary>
            This constructor is used internally to convert from <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer.Options"/> to <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions"/>
            as we support <paramref name="replacementString"/> in command line and entrypoint API only.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MissingValueReplacingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.Int32,System.Int32,System.ValueTuple{System.String,System.String}[])">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numberOfBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <param name="columns">Specifies the names of the input columns for the transformation, and their respective output column names.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MutualInformationFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="env">The environment to use.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="labelColumn">Name of the column to use for labels.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MutualInformationFeatureSelectingEstimator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.Options,Microsoft.ML.IDataView)">
            <summary>
            Create method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectingEstimator.ComputeThreshold(System.Single[][],System.Int32,System.Int32@)">
            <summary>
            Computes the threshold for the scores such that the top k slots are preserved.
            If there are less than k scores greater than zero, the threshold is set to zero and
            the tiedScoresToKeep is set to zero, so that we only keep scores strictly greater than zero.
            </summary>
            <param name="scores">The score for each column and each slot.</param>
            <param name="topk">How many slots to preserve.</param>
            <param name="tiedScoresToKeep">If there are ties, how many of them to keep.</param>
            <returns>The threshold.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.TrainCore(Microsoft.ML.Runtime.IHost,Microsoft.ML.IDataView,System.String,System.String[],System.Int32,System.Int32[])">
            <summary>
            Returns the feature selection scores for each slot of each column.
            </summary>
            <param name="host">The host.</param>
            <param name="input">The input dataview.</param>
            <param name="labelColumnName">The label column.</param>
            <param name="columns">The columns for which to compute the feature selection scores.</param>
            <param name="numBins">The number of bins to use for numeric features.</param>
            <param name="colSizes">The columns' sizes before dropping any slots.</param>
            <returns>A list of scores for each column and each slot.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation(Microsoft.ML.Data.Transposer,System.Int32)">
            <summary>
            Computes the mutual information for one column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation``1(Microsoft.ML.Data.Transposer,System.Int32,Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.Mapper{``0})">
            <summary>
            Computes the mutual information for one column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.ComputeMutualInformation(Microsoft.ML.Data.VBuffer{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Computes the mutual information for one slot.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.FillTable(Microsoft.ML.Data.VBuffer{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Fills the contingency table.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.BinKeys``1(Microsoft.ML.Data.DataViewType)">
            <summary>
            Maps from keys to ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.BinInts(Microsoft.ML.Data.VBuffer{System.Int32}@,Microsoft.ML.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps Ints.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.BinSingles(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps from Singles to ints. NaNs (and only NaNs) are mapped to the first bin.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.Impl.BinDoubles(Microsoft.ML.Data.VBuffer{System.Double}@,Microsoft.ML.Data.VBuffer{System.Int32}@,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps from Doubles to ints. NaNs (and only NaNs) are mapped to the first bin.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MutualInformationFeatureSelectionUtils.CreateVectorMapper``2(Microsoft.ML.Data.ValueMapper{``0,``1})">
            <summary>
            Given a mapper from T to int, creates a mapper from VBuffer{T} to VBuffer&lt;int&gt;.
            Assumes that the mapper maps default(TSrc) to default(TDst) so that the returned mapper preserves sparsity.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NAHandling">
            <summary>
            Entry point methods for NA handling.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotEncodingTransformer">
            <summary>
        Converts the categorical value into an indicator array by building a dictionary of categories based on the data and using the id in the dictionary as the index in the array
      </summary><remarks>
        <para>
        The CategoricalOneHotVectorizer transform passes through a data set, operating on text columns, to
        build a dictionary of categories.
        For each row, the entire text string appearing in the input column is defined as a category.</para>
        <para>The output of this transform is an indicator vector.</para>
        Each slot in this vector corresponds to a category in the dictionary, so its length is the size of the built dictionary.
        <para>The CategoricalOneHotVectorizer can be applied to one or more columns, in which case it builds and uses a separate dictionary
        for each column that it is applied to.</para>
        
        <para>The <see cref="T:Microsoft.ML.Transforms.CategoricalTransformOutputKind" /> produces integer values and KeyType columns.
        The Key value is the one-based index of the slot set in the Ind/Bag options.
        If the Key option is not found, it is assigned the value zero.
        In the <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" />, <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> options are not found, they result in an all zero bit vector.
        <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Ind" /> and <see cref="F:Microsoft.ML.Transforms.CategoricalTransformOutputKind.Bag" /> differ simply in how the bit-vectors generated from individual slots are aggregated:
        for Ind they are concatenated and for Bag they are added.
        When the source column is a singleton, the Ind and Bag options are identical.</para>
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotEncodingEstimator">
            <summary>
            Estimator which takes set of columns and produce for each column indicator array.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind.Bag">
            <summary>
            Output is a bag (multi-set) vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind.Indicator">
            <summary>
            Output is an indicator vector
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind.Key">
            <summary>
            Output is a key value
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind.Binary">
            <summary>
            Output is binary encoded
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotEncodingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotEncodingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="outputKind">Output kind: Bag (multi-set vector), Ind (indicator vector), Key (index), or Binary encoded indicator vector.</param>
            <param name="maximumNumberOfKeys">Maximum number of terms to keep per column when auto-training.</param>
            <param name="keyOrdinality">How items should be ordered when vectorized. If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/> choosen they will be in the order encountered.
            If <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, items are sorted according to their default comparison, for example, text sorting will be case sensitive (for example, 'A' then 'Z' then 'a').</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotEncodingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind)">
            Initializes an instance of the <see cref="T:Microsoft.ML.Transforms.OneHotEncodingEstimator"/>.
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotEncodingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotEncodingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.OneHotEncodingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer">
            <summary>
            Produces a column of indicator vectors. The mapping between a value and a corresponding index is done through hashing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.Options">
            <summary>
            This class is a merger of <see cref="T:Microsoft.ML.Transforms.HashingTransformer.Options"/> and <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingTransformer.Options"/>
            with join option removed
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind)">
            <summary>
            A helper method to create <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the column to be transformed. If this is null '<paramref name="name"/>' will be used.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers. Returns the output schema of the data, if
            the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data. Note that <see cref="T:Microsoft.ML.IDataView"/>
            are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an appropriate schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingTransformer.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotHashEncodingEstimator">
            <summary>
            Estimator that produces a column of indicator vectors. The mapping between a value and a corresponding index is done through hashing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OneHotHashEncodingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingEstimator.ColumnOptions.#ctor(System.String,System.String,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind,System.Int32,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="outputKind">Kind of output: bag, indicator vector etc.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,Microsoft.ML.Transforms.OneHotEncodingEstimator.OutputKind)">
            <summary>
            Instantiates a new instance of <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingEstimator"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
            <param name="outputKind">The type of output expected.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OneHotHashEncodingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.OptionalColumnTransform">
            <summary>
        Creates a new column with the specified type and default values.
      </summary><remarks>
        If the user wish to create additional columns with a particular type and default values, or replicated the values from one column to another, changing their type, they can do so using this transform.
        This transform can be used as a workaround to create a Label column after deserializing a model, for prediction.
        Some transforms in the serialized model operate on the Label column, and would throw errors during prediction if such a column is not found.
      </remarks>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.Bindings.GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.OptionalColumnTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="columns">Columns to transform.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.OptionalColumnTransform.Arguments,Microsoft.ML.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.OptionalColumnTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`3.PermuterState">
            <summary>
            This is used as a hack to force Lambda Transform behave sequentially.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`3.FeaturesBuffer">
            <summary>
            Helper structure used for features permutation in Lambda Transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`3.FeatureIndex">
            <summary>
            Helper class for report's Lambda transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.PermutationFeatureImportance`3.FeatureName">
            <summary>
             One more helper class for report's Lambda transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ProduceIdTransform">
             <summary>
             Produces a column with the cursor's ID as a column. This can be useful for diagnostic purposes.
            
             This class will obviously generate different data given different IDs. So, if you save data to
             some other file, then apply this transform to that dataview, it may of course have a different
             result. This is distinct from most transforms that produce results based on data alone.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ProduceIdTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ProduceIdTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Arabic">
             <summary>
               Looks up a localized string similar to ب
            ب
            بعد
            حتى
            حين
            دون
            صباح
            في
            قبل
            لكن
            مساء
            مع
            من
            نحو
            واكد
            وفي
            ومن
            اطار
            و
            اثر
            اجل
            احد
            اذا
            اكثر
            اكد
            التي
            الثاني
            الثانية
            الذاتي
            الذي
            الذين
            السابق
            الف
            الماضي
            المقبل
            الوقت
            اليوم
            امس
            انه
            باسم
            بان
            برس
            بسبب
            بشكل
            بعض
            بن
            به
            بها
            بين
            تم
            ثلاثة
            ثم
            جميع
            حاليا
            حوالى
            حول
            حيث
            خلال
            ذلك
            زيارة
            سنة
            سنوات
            شخصا
            صفر
            ضد
            ضمن
            عام
            عاما
            عدة
            عدد
            عدم
            عشر
            عشرة
            على
            عليه
            عليها
            عن
            عند
            عندما
            غدا
            غير
            فان
            فيه
            فيها
            قال
            قد
            قوة
            كان
            كانت
            كل
            كلم
            كما
            لا
            لدى
            لقا [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Czech">
             <summary>
               Looks up a localized string similar to bude
            budeš
            byl
            byla
            byli
            bylo
            je
            jsem
            jsme
            jsou
            jste
            aby
            aj
            ale
            ani
            asi
            až
            bez
            bude-li
            budeme
            budeme-li
            budete
            budete-li
            budeš-li
            budou
            budou-li
            budu
            budu-li
            buď
            buďme
            buďte
            by
            byl-li
            byla-li
            bylas
            byli-li
            bylo-li
            bylos
            byls
            byly
            byly-li
            byt
            byv
            byvše
            byvši
            být
            býti
            co
            což
            cz
            další
            design
            dnes
            do
            email
            ho
            jak
            jako
            je-li
            jeho
            jej
            jejich
            její
            jen
            ještě
            ji
            jine
            již
            jsa
            jsem-li
            jsi
            jsi-li
            jsme-li
            jsou-li
            jsouc
            jsouce
            jste-li
            kam
            kde
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Danish">
             <summary>
               Looks up a localized string similar to af
            andre
            at
            da
            de
            deres
            dette
            din
            ej
            en
            ene
            et
            han
            hans
            i
            ind
            lille
            ni
            ny
            otte
            stor
            store
            syv
            alle
            andet
            begge
            den
            denne
            der
            det
            dig
            dog
            du
            eller
            end
            eneste
            enhver
            fem
            fire
            flere
            fleste
            for
            fordi
            forrige
            fra
            få
            før
            god
            har
            hendes
            her
            hun
            hvad
            hvem
            hver
            hvilken
            hvis
            hvor
            hvordan
            hvorfor
            hvornår
            ikke
            ingen
            intet
            jeg
            jeres
            kan
            kom
            kommer
            lav
            lidt
            man
            mand
            mange
            med
            meget
            men
            mens
            mere
            mig
            ned
            nogen
            noget
            nyt
            nær
            næste
            næsten
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Dutch">
             <summary>
               Looks up a localized string similar to aan
            af
            al
            als
            bij
            dan
            dat
            die
            dit
            een
            en
            er
            had
            heb
            hem
            het
            hij
            hoe
            hun
            ik
            in
            is
            je
            kan
            me
            men
            met
            mij
            nog
            nu
            of
            ons
            ook
            te
            tot
            uit
            van
            was
            wat
            we
            wel
            wij
            zal
            ze
            zei
            zij
            zo
            zou
            .
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.English">
             <summary>
               Looks up a localized string similar to a
            about
            above
            above
            across
            after
            afterwards
            again
            against
            all
            almost
            alone
            along
            already
            also
            although
            always
            am
            among
            amongst
            amoungst
            amount
            an
            and
            another
            any
            anyhow
            anyone
            anything
            anyway
            anywhere
            are
            around
            as
            at
            back
            be
            became
            because
            become
            becomes
            becoming
            been
            before
            beforehand
            behind
            being
            below
            beside
            besides
            between
            beyond
            both
            bottom
            but
            by
            call
            can
            cannot
            cant
            co
            con
            could
            couldnt
            cry
            de
            describe
            detail
            do
            done
            down
            due
            du [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.French">
             <summary>
               Looks up a localized string similar to de
            des
            d&apos;
            la
            du
            l&apos;
            et
            à
            en
            sur
            aux
            par
            pour
            au
            dans
            un
            est
            été
            a
            une
            sous
            ou
            pas
            entre
            qui
            nº
            lès
            plus
            il
            y
            que
            contre
            je
            non
            n&apos;
            sans
            vous
            avec
            ne
            ce
            son
            ses
            mon
            moins
            se
            qu&apos;
            moi
            j&apos;
            c&apos;
            si
            ma
            s&apos;
            être
            tout
            comme
            sa
            sont
            ai
            elle
            autres
            pendant
            chez
            mais
            avant
            nous
            cette
            après
            vers
            était
            tous
            autre
            tu
            très
            même
            ont
            anti
            puis
            leur
            où
            lui
            ça
            suis
            depuis
            ni
            mes
            près
            hors
            outre
            ils
            votre
            toi
            lors
            t&apos;
            aussi
            donc
            ces
            toute
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.German">
             <summary>
               Looks up a localized string similar to a
            ab
            aber
            aber
            ach
            acht
            achte
            achten
            achter
            achtes
            ag
            alle
            allein
            allem
            allen
            aller
            allerdings
            alles
            allgemeinen
            als
            als
            also
            am
            an
            andere
            anderen
            andern
            anders
            au
            auch
            auch
            auf
            aus
            ausser
            außer
            ausserdem
            außerdem
            b
            bald
            bei
            beide
            beiden
            beim
            beispiel
            bekannt
            bereits
            besonders
            besser
            besten
            bin
            bis
            bisher
            bist
            c
            d
            da
            dabei
            dadurch
            dafür
            dagegen
            daher
            dahin
            dahinter
            damals
            damit
            danach
            daneben
            dank
            dann
            daran
            darauf
            daraus
            darf
            darfst
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Italian">
             <summary>
               Looks up a localized string similar to a
            adesso
            ai
            al
            alla
            allo
            allora
            altre
            altri
            altro
            anche
            ancora
            avere
            aveva
            avevano
            ben
            buono
            che
            chi
            cinque
            comprare
            con
            consecutivi
            consecutivo
            cosa
            cui
            da
            del
            della
            dello
            dentro
            deve
            devo
            di
            doppio
            due
            e
            ecco
            fare
            fine
            fino
            fra
            gente
            giù
            ha
            hai
            hanno
            ho
            il
            indietro
            invece
            io
            la
            lavoro
            le
            lei
            lo
            loro
            lui
            lungo
            ma
            me
            meglio
            molta
            molti
            molto
            nei
            nella
            no
            noi
            nome
            nostro
            nove
            nuovi
            nuovo
            o
            oltre
            ora
            otto
            peggio
            pero
            persone
            più [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Japanese">
             <summary>
               Looks up a localized string similar to これ
            それ
            あれ
            この
            その
            あの
            ここ
            そこ
            あそこ
            こちら
            どこ
            だれ
            なに
            なん
            何
            私
            貴方
            貴方方
            我々
            私達
            あの人
            あのかた
            彼女
            彼
            です
            あります
            おります
            います
            は
            が
            の
            に
            を
            で
            え
            から
            まで
            より
            も
            どの
            と
            し
            それで
            しかし
            .
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Norwegian_Bokmal">
             <summary>
               Looks up a localized string similar to alle
            andre
            arbeid
            av
            begge
            bort
            bra
            bruke
            da
            denne
            der
            deres
            det
            din
            disse
            du
            eller
            en
            ene
            eneste
            enhver
            enn
            er
            et
            folk
            for
            fordi
            forsøke
            fra
            få
            før
            først
            gjorde
            gjøre
            god
            gå
            ha
            hadde
            han
            hans
            hennes
            her
            hva
            hvem
            hver
            hvilken
            hvis
            hvor
            hvordan
            hvorfor
            i
            ikke
            inn
            innen
            kan
            kunne
            lage
            lang
            lik
            like
            makt
            mange
            med
            meg
            meget
            men
            mens
            mer
            mest
            min
            mye
            må
            måte
            navn
            nei
            ny
            nå
            når
            og
            også
            om
            opp
            oss
            over
            part
            punkt
            på
            rett
            rikti [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Polish">
             <summary>
               Looks up a localized string similar to ach
            aj
            albo
            bardzo
            bez
            bo
            być
            ci
            ciebie
            cię
            co
            czy
            daleko
            dla
            dlaczego
            dlatego
            do
            dobrze
            dokąd
            dość
            dużo
            dwa
            dwaj
            dwie
            dwoje
            dzisiaj
            dziś
            gdyby
            gdzie
            go
            ich
            ile
            im
            inny
            ja
            jak
            jakby
            jaki
            je
            jeden
            jedna
            jedno
            jego
            jej
            jemu
            jest
            jestem
            jeśli
            jeżeli
            już
            ją
            każdy
            kiedy
            kierunku
            kto
            ku
            lub
            ma
            mają
            mam
            mi
            mnie
            mną
            moi
            moja
            moje
            może
            mu
            my
            mój
            na
            nam
            nami
            nas
            nasi
            nasz
            nasza
            nasze
            natychmiast
            nic
            nich
            nie
            niego
            niej
            niemu
            nigdy
            n [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Portuguese">
             <summary>
               Looks up a localized string similar to último
            é
            acerca
            agora
            algumas
            alguns
            ali
            ambos
            antes
            apontar
            aquela
            aquelas
            aquele
            aqueles
            aqui
            atrás
            bem
            bom
            cada
            caminho
            cima
            com
            como
            comprido
            conhecido
            corrente
            das
            debaixo
            dentro
            desde
            desligado
            deve
            devem
            deverá
            direita
            diz
            dizer
            dois
            dos
            e
            ela
            ele
            eles
            em
            enquanto
            então
            está
            estão
            estado
            estar
            estará
            este
            estes
            esteve
            estive
            estivemos
            estiveram
            eu
            fará
            faz
            fazer
            fazia
            fez
            fim
            foi
            fora
            horas
            iniciar
            inicio
            ir
            irá
            isto
            ligado
            maio [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Portuguese_Brazilian">
             <summary>
               Looks up a localized string similar to último
            é
            acerca
            agora
            algumas
            alguns
            ali
            ambos
            antes
            apontar
            aquela
            aquelas
            aquele
            aqueles
            aqui
            atrás
            bem
            bom
            cada
            caminho
            cima
            com
            como
            comprido
            conhecido
            corrente
            das
            debaixo
            dentro
            desde
            desligado
            deve
            devem
            deverá
            direita
            diz
            dizer
            dois
            dos
            e
            ela
            ele
            eles
            em
            enquanto
            então
            está
            estão
            estado
            estar
            estará
            este
            estes
            esteve
            estive
            estivemos
            estiveram
            eu
            fará
            faz
            fazer
            fazia
            fez
            fim
            foi
            fora
            horas
            iniciar
            inicio
            ir
            irá
            isto
            ligado
            maio [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Russian">
             <summary>
               Looks up a localized string similar to а
            е
            и
            ж
            м
            о
            на
            не
            ни
            об
            но
            он
            мне
            мои
            мож
            она
            они
            оно
            мной
            много
            многочисленное
            многочисленная
            многочисленные
            многочисленный
            мною
            мой
            мог
            могут
            можно
            может
            можхо
            мор
            моя
            моё
            мочь
            над
            нее
            оба
            нам
            нем
            нами
            ними
            мимо
            немного
            одной
            одного
            менее
            однажды
            однако
            меня
            нему
            меньше
            ней
            наверху
            него
            ниже
            мало
            надо
            один
            одиннадцать
            одиннадцатый
            назад
            наиболее
            недавно
            миллионов
            недалеко
            между
            низко
            меля
            нельзя
            нибудь
            непрерывно
            наконец
            никогда
            ник [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Spanish">
             <summary>
               Looks up a localized string similar to ésa
            ésta
            éste
            última
            últimas
            último
            últimos
            aún
            a
            la
            vez
            a.m.
            abierto
            abunda
            acaba
            además
            ahora
            al
            algún
            alguna
            alguno
            alrededor
            alta
            altas
            alto
            altos
            am
            ambas
            ambos
            antes
            aquél
            aquélla
            aquí
            aquel
            aquella
            aquellas
            aquello
            aquellos
            así
            atardecer
            aunque
            básicamente
            b
            c
            cada
            casi
            celebran
            centro
            cercanía
            cierta
            ciertas
            cierto
            ciertos
            común
            comúnmente
            como
            complemento
            complementos
            completamente
            comunes
            con
            conforme
            considerable
            considerada
            consider [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.Properties.Resources.Swedish">
             <summary>
               Looks up a localized string similar to aderton
            adertonde
            adjö
            aldrig
            alla
            allas
            allt
            alltid
            alltså
            än
            andra
            andras
            annan
            annat
            ännu
            artonde
            arton
            åtminstone
            att
            åtta
            åttio
            åttionde
            åttonde
            av
            även
            båda
            bådas
            bakom
            bara
            bäst
            bättre
            behöva
            behövas
            behövde
            behövt
            beslut
            beslutat
            beslutit
            bland
            blev
            bli
            blir
            blivit
            bort
            borta
            bra
            då
            dag
            dagar
            dagarna
            dagen
            där
            därför
            de
            del
            delen
            dem
            den
            deras
            dess
            det
            detta
            dig
            din
            dina
            dit
            ditt
            dock
            du
            efter
            eftersom
            elfte
            eller
            elva
            en
            enk [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ApproximatedKernelTransformer">
            <summary>
            Maps vector columns to a feature space where the inner products approximate a user specified shift-invariant kernel.
            The kernel is indicated by specifying a <see cref="T:Microsoft.ML.Transforms.KernelBase"/> instance. The available implementations
            are <see cref="T:Microsoft.ML.Transforms.GaussianKernel"/> and <see cref="T:Microsoft.ML.Transforms.LaplacianKernel"/>.
            This transformation is based on this paper by
            <a href="http://pages.cs.wisc.edu/~brecht/papers/07.rah.rec.nips.pdf">Rahimi and Recht</a>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator">
            <summary>
            Maps vector columns to a low -dimensional feature space.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one Gcn column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.Name">
            <summary>
            Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.InputColumnName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.InputColumnName">
            <summary>
            Name of the column to transform.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.Generator">
            <summary>
            Which fourier generator to use.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.Rank">
            <summary>
            The number of random Fourier features to create.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.UseCosAndSinBases">
            <summary>
            If <see langword="true"/>, use both of cos and sin basis functions to create two features for every random Fourier frequency.
            Otherwise, only cos bases would be used.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.Seed">
            <summary>
            The seed of the random number generator for generating the new features (if unspecified, the global random is used).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions.#ctor(System.String,System.Int32,System.Boolean,System.String,Microsoft.ML.Transforms.KernelBase,System.Nullable{System.Int32})">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="rank">The number of random Fourier features to create.</param>
            <param name="useCosAndSinBases">If <see langword="true"/>, use both of cos and sin basis functions to create two features for
            every random Fourier frequency. Otherwise, only cos bases would be used.</param>
            <param name="inputColumnName">Name of column to transform. </param>
            <param name="generator">Which fourier generator to use.</param>
            <param name="seed">The seed of the random number generator for generating the new features (if unspecified, the global random is used).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Convinence constructor for simple one column case.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="rank">The number of random Fourier features to create.</param>
            <param name="useCosAndSinBases">Create two features for every random Fourier frequency? (one for cos and one for sin).</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.ApproximatedKernelTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SerializableLambdaTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Creates an instance of the transform from a context.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SerializableLambdaTransform.GetSerializedStaticDelegate(Microsoft.ML.Transforms.LambdaTransform.LoadDelegate)">
            <summary>
            Given a single item function that should be a static method, this builds a serialized version of
            that method that should be enough to "recover" it, assuming it is a "recoverable" method (recoverable
            here is a loose definition, meaning that <see cref="M:Microsoft.ML.Transforms.SerializableLambdaTransform.DeserializeStaticDelegateOrNull(Microsoft.ML.Runtime.IExceptionContext,System.Byte[],System.Exception@)"/> is capable
            of creating it, which includes among other things that it's static, non-lambda, accessible to
            this assembly, etc.).
            </summary>
            <param name="func">The method that should be "recoverable"</param>
            <returns>A string array describing the input method</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.SerializableLambdaTransform.DeserializeStaticDelegateOrNull(Microsoft.ML.Runtime.IExceptionContext,System.Byte[],System.Exception@)">
            <summary>
            This is essentially the inverse function to <see cref="M:Microsoft.ML.Transforms.SerializableLambdaTransform.GetSerializedStaticDelegate(Microsoft.ML.Transforms.LambdaTransform.LoadDelegate)"/>. If the function
            is not recoverable for any reason, this will return <c>null</c>, and the error parameter will be set.
            </summary>
            <param name="ectx">Exception context.</param>
            <param name="serialized">The serialized bytes, as returned by <see cref="M:Microsoft.ML.Transforms.SerializableLambdaTransform.GetSerializedStaticDelegate(Microsoft.ML.Transforms.LambdaTransform.LoadDelegate)"/></param>
            <param name="inner">An exception the caller may raise as an inner exception if the return value is
            <c>null</c>, else, this itself will be <c>null</c></param>
            <returns>The recovered function wrapping the recovered method, or <c>null</c> if it could not
            be created, for some reason</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.StatefulFilterTransform`3">
            <summary>
            This transform is similar to <see cref="T:Microsoft.ML.Transforms.CustomMappingTransformer`2"/>, but it allows per-cursor state,
            as well as the ability to 'accept' or 'filter out' some rows of the supplied <see cref="T:Microsoft.ML.IDataView"/>.
            The downside is that the provided lambda is eagerly called on every row (not lazily when needed), and
            parallel cursors are not allowed.
            </summary>
            <typeparam name="TSrc">The type that describes what 'source' columns are consumed from the input <see cref="T:Microsoft.ML.IDataView"/>.</typeparam>
            <typeparam name="TDst">The type that describes what new columns are added by this transform.</typeparam>
            <typeparam name="TState">The type that describes per-cursor state.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.StatefulFilterTransform`3.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Func{`0,`1,`2,System.Boolean},System.Action{`2},System.Action{System.IO.BinaryWriter},Microsoft.ML.Transforms.LambdaTransform.LoadDelegate,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a filter transform that is savable iff <paramref name="saveAction"/> and <paramref name="loadFunc"/> are
            not null.
            </summary>
            <param name="env">The host environment</param>
            <param name="source">The dataview upon which we construct the transform</param>
            <param name="filterFunc">The function by which we transform source to destination columns and decide whether
            to keep the row.</param>
            <param name="initStateAction">The function that is called once per cursor to initialize state. Can be null.</param>
            <param name="saveAction">An action that allows us to save state to the serialization stream. May be
            null simultaneously with <paramref name="loadFunc"/>.</param>
            <param name="loadFunc">A function that given the serialization stream and a data view, returns
            an <see cref="T:Microsoft.ML.Data.ITransformTemplate"/>. The intent is, this returned object should itself be a
            <see cref="T:Microsoft.ML.Transforms.CustomMappingTransformer`2"/>, but this is not strictly necessary. This delegate should be
            a static non-lambda method that this assembly can legally call. May be null simultaneously with
            <paramref name="saveAction"/>.</param>
            <param name="inputSchemaDefinition">The schema definition overrides for <typeparamref name="TSrc"/></param>
            <param name="outputSchemaDefinition">The schema definition overrides for <typeparamref name="TDst"/></param>
        </member>
        <member name="M:Microsoft.ML.Transforms.StatefulFilterTransform`3.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.StatefulFilterTransform{`0,`1,`2},Microsoft.ML.IDataView)">
            <summary>
            The 'reapply' constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.StatefulFilterTransform`3.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.StatefulFilterTransform`3.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.UngroupTransform">
            <summary>
        Un-groups vector columns into sequences of rows, inverse of Group transform.
       </summary><remarks>
        <para>This can be thought of as an inverse of the <see cref="T:Microsoft.ML.Transforms.CombinerByContiguousGroupId" />.  
        For all specified vector columns ("pivot" columns), performs the "ungroup" (or "unroll") operation as outlined below.
        </para>
        <para>If the only pivot column is called P, and has size K, then for every row of the input we will produce 
         K rows, that are identical in all columns except P. The column P will become a scalar column, and this 
         column will hold all the original values of input's P, one value per row, in order. The order of columns 
         will remain the same.
        </para>
        <para>Variable-length pivot columns are supported (including zero, which will eliminate the row from the result).</para>
        <para>Multiple pivot columns are also supported:</para>
        <list type="bullet">
          <item><description>A number of output rows is controlled by the 'mode' parameter. 
            <list type="bullet">
              <item><term>outer</term><description> it is equal to the maximum length of pivot columns</description></item>
              <item><term>inner</term><description> it is equal to the minimum length of pivot columns</description></item>
              <item><term>first</term><description> it is equal to the length of the first pivot column</description></item>
            </list>
            </description>
          </item>
          <item><description>
              If a particular pivot column has size that is different than the number of output rows, the extra slots will
              be ignored, and the missing slots will be 'padded' with default values.
            </description></item>
        </list>
        <para>All metadata are preserved for the retained columns. For 'unrolled' columns, all known metadata
        except slot names are preserved.
        </para>
      </remarks>
        </member>
        <member name="T:Microsoft.ML.Transforms.UngroupTransform.UngroupMode">
            <summary>
            Controls the number of output rows produced by the <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/> transform
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.Inner">
            <summary>
            The number of output rows is equal to the minimum length of pivot columns
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.Outer">
            <summary>
            The number of output rows is equal to the maximum length of pivot columns
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupMode.First">
            <summary>
            The number of output rows is equal to the length of the first pivot column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.Transforms.UngroupTransform.UngroupMode,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="mode">Specifies how to unroll multiple pivot columns of different size.</param>
            <param name="columns">Columns to unroll, or 'pivot'</param>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._infos">
            <summary>
            Information of columns to be ungrouped in <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._inputSchema"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._pivotIndex">
            <summary>
            <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._pivotIndex"/>[i] is -1 means that the i-th column in both of <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._inputSchema"/> and <see cref="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.OutputSchema"/>
            are not produced by ungrouping; we just copy the i-th input column to the i-th output column.
            If <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._pivotIndex"/>[i] is not -1, the i-th output column should be produced by ungrouping the i-th input column.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.InputColumnCount">
            <summary>
            Columns contained in <see cref="T:Microsoft.ML.IDataView"/> passed in <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/>.
            Note that input data's schema is stored as <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._inputSchema"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.Mode">
            <summary>
            This attribute specifies how <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/> expanding input columns stored in <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._infos"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.OutputSchema">
            <summary>
            Output data's <see cref="T:Microsoft.ML.DataViewSchema"/> produced by this <see cref="T:Microsoft.ML.Transforms.UngroupTransform"/>
            when input data's schema is <see cref="F:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding._inputSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.GetActiveInput(System.Func{System.Int32,System.Boolean})">
            <summary>
            Return an array of active input columns given the target predicate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.IsPivot(System.Int32)">
            <summary>
            Determine if an output column is produced by a pivot column from input.
            </summary>
            <param name="col">Column index in <see cref="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.OutputSchema"/></param>
            <returns>True if the specified column is produced by expanding a pivot column and false otherwise.</returns>
        </member>
        <member name="F:Microsoft.ML.Transforms.UngroupTransform.Cursor._active">
            <summary>
            Total number of input columns is <see cref="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.InputColumnCount"/> of <see cref="F:Microsoft.ML.Transforms.UngroupTransform.Cursor._ungroupBinding"/>.
            Note that the number of input columns equals to the number of output columns; that is, <see cref="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.InputColumnCount"/>
            is identical to the number of columns in <see cref="P:Microsoft.ML.Transforms.UngroupTransform.UngroupBinding.OutputSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.Cursor.MakeSizeGetter``1(System.Int32)">
            <summary>
            Create a getter which returns the length of a vector (aka a column's value) in the input data.
            </summary>
            <typeparam name="T">The type of the considered input vector</typeparam>
            <param name="col">Column index, which should point to a vector-typed column in the input data.</param>
            <returns>Getter of the length to the considered input vector.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.UngroupTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns the getter of an output column.
            </summary>
            <typeparam name="TValue"> is the output column's content type, for example, <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.ConversionsCatalog">
            <summary>
            Extensions for the <see cref="T:Microsoft.ML.TransformsCatalog.ConversionTransforms"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ConversionsCatalog.MapKeyToBinaryVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
             Convert the key types back to binary vector.
            </summary>
            <param name="catalog">The categorical transform's catalog.</param>
            <param name="columns">Specifies the output and input columns on which the transformation should be applied.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsCatalog.MapKeyToBinaryVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String)">
            <summary>
             Convert the key types back to binary vector.
            </summary>
            <param name="catalog">The categorical transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
        </member>
        <member name="T:Microsoft.ML.CustomMappingCatalog">
            <summary>
            Extension methods for custom mapping transformers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.CustomMappingCatalog.CustomMapping``2(Microsoft.ML.TransformsCatalog,System.Action{``0,``1},System.String,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a custom mapping of input columns to output columns.
            </summary>
            <typeparam name="TSrc">The class defining which columns to take from the incoming data.</typeparam>
            <typeparam name="TDst">The class defining which new columns are added to the data.</typeparam>
            <param name="catalog">The transform catalog</param>
            <param name="mapAction">The mapping action. This must be thread-safe and free from side effects.</param>
            <param name="contractName">The contract name, used by ML.NET for loading the model. If <c>null</c> is specified, such a trained model would not be save-able.</param>
            <param name="inputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TSrc"/> and input data.</param>
            <param name="outputSchemaDefinition">Additional parameters for schema mapping between <typeparamref name="TDst"/> and output data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FastTree](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CustomMapping.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.IndicateMissingValues(Microsoft.ML.TransformsCatalog,System.String,System.String)">
            <summary>
            Creates a new output column, or replaces the source with a new column
            (depending on whether the <paramref name="inputColumnName"/> is given a value, or left to null)
            of boolean type, with the same number of slots as the input column. The value in the output column
            is true if the value in the input column is missing.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            If left to <value>null</value> the <paramref name="inputColumnName"/> will get replaced.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[RPCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/IndicateMissingValues.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.IndicateMissingValues(Microsoft.ML.TransformsCatalog,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Creates a new output column, of boolean type, with the same number of slots as the input column. The value in the output column
            is true if the value in the input column is missing.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="columns">Specifies the names of the columns on which to apply the transformation.</param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.ReplaceMissingValues(Microsoft.ML.TransformsCatalog,System.String,System.String,Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode,System.Boolean)">
            <summary>
            Creates a new output column, or replaces the source with a new column
            (depending on whether the <paramref name="outputColumnName"/> is given a value, or left to null)
            identical to the input column for everything but the missing values. The missing values of the input column, in this new column are replaced with
            one of the values specifid in the <paramref name="replacementMode"/>. The default for the <paramref name="replacementMode"/> is
            <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.DefaultValue"/>.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            If not provided, the <paramref name="inputColumnName"/> will be replaced with the results of the transforms.</param>
            <param name="replacementMode">The type of replacement to use as specified in <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode"/></param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[RPCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/ReplaceMissingValues.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.ReplaceMissingValues(Microsoft.ML.TransformsCatalog,Microsoft.ML.InputOutputColumnPair[],Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode,System.Boolean)">
            <summary>
            Creates a new output column, identical to the input column for everything but the missing values.
            The missing values of the input column, in this new column are replaced with <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.DefaultValue"/>.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="columns">Specifies the names of the columns on which to apply the transformation.</param>
            <param name="replacementMode">The type of replacement to use as specified in <see cref="T:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode"/></param>
            <param name="imputeBySlot">If true, per-slot imputation of replacement is performed.
            Otherwise, replacement value is imputed for the entire vector column. This setting is ignored for scalars and variable vectors,
            where imputation is always for the entire column.</param>
        </member>
        <member name="M:Microsoft.ML.ExtensionsCatalog.ReplaceMissingValues(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.MissingValueReplacingEstimator.ColumnOptions[])">
            <summary>
            Creates a new output column, identical to the input column for everything but the missing values.
            The missing values of the input column, in this new column are replaced with <see cref="F:Microsoft.ML.Transforms.MissingValueReplacingEstimator.ReplacementMode.DefaultValue"/>.
            </summary>
            <param name="catalog">The transform extensions' catalog.</param>
            <param name="columns">The name of the columns to use, and per-column transformation configuraiton.</param>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numberOfBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnMutualInformation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnMutualInformation(Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms,Microsoft.ML.InputOutputColumnPair[],System.String,System.Int32,System.Int32)">
            <summary>
        Selects the top k slots across all specified columns ordered by their mutual information with the label column.
      </summary><remarks>
        <para>
          The mutual information of two random variables X and Y is a measure of the mutual dependence between the variables.
          Formally, the mutual information can be written as:
        </para>
        <para>I(X;Y) = E[log(p(x,y)) - log(p(x)) - log(p(y))]</para>
        <para>where the expectation is taken over the joint distribution of X and Y. 
        Here p(x,y) is the joint probability density function of X and Y, p(x) and p(y) are the marginal probability density functions of X and Y respectively. 
        In general, a higher mutual information between the dependent variable (or label) and an independent variable (or feature) means 
        that the label has higher mutual dependence over that feature.
        It keeps the top SlotsInOutput features with the largest mutual information with the label.
        </para>
      </remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Specifies the names of the input columns for the transformation, and their respective output column names.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="slotsInOutput">The maximum number of slots to preserve in the output. The number of slots to preserve is taken across all input columns.</param>
            <param name="numberOfBins">Max number of bins used to approximate mutual information between each input column and the label column. Power of 2 recommended.</param>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnCount(Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms,Microsoft.ML.Transforms.CountFeatureSelectingEstimator.ColumnOptions[])">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Describes the parameters of the feature selection process for each column pair.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnCount(Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms,System.String,System.String,System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectFeaturesBasedOnCount](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/FeatureSelectionTransform.cs?range=1-4,10-121)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FeatureSelectionCatalog.SelectFeaturesBasedOnCount(Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int64)">
            <member name="CountFeatureSelection">
      <summary>
        Selects the slots for which the count of non-default values is greater than or equal to a threshold.
      </summary>
      <remarks>
        <para>
          This transform uses a set of aggregators to count the number of non-default values for each slot and
          instantiates a <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer" /> to actually drop the slots.
          This transform is useful when applied together with a <see cref="T:Microsoft.ML.Transforms.OneHotHashEncodingTransformer" />. 
          The count feature selection can remove those features generated by the hash transform that have no data in the examples.
        </para>
      </remarks>
    </member>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Specifies the names of the columns on which to apply the transformation.</param>
            <param name="count">If the count of non-default values for a slot is greater than or equal to this threshold in the training data, the slot is preserved.</param>
        </member>
        <member name="T:Microsoft.ML.KernelExpansionCatalog">
            <summary>
            The catalog of numerical feature engineering using kernel methods.
            </summary>
        </member>
        <member name="M:Microsoft.ML.KernelExpansionCatalog.ApproximatedKernelMap(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int32,System.Boolean,Microsoft.ML.Transforms.KernelBase,System.Nullable{System.Int32})">
            <summary>
            Takes column filled with a vector of floats and maps its to a random low-dimensional feature space.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="rank">The number of random Fourier features to create.</param>
            <param name="useCosAndSinBases">If <see langword="true"/>, use both of cos and sin basis functions to create two features for every random Fourier frequency.
            Otherwise, only cos bases would be used.</param>
            <param name="generator">Which fourier generator to use.</param>
            <param name="seed">The seed of the random number generator for generating the new features (if unspecified, the global random is used).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CreateRandomFourierFeatures](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.KernelExpansionCatalog.ApproximatedKernelMap(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.ApproximatedKernelMappingEstimator.ColumnOptions[])">
            <summary>
            Takes columns filled with a vector of floats and maps its to a random low-dimensional feature space.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">The input columns to use for the transformation.</param>
        </member>
        <member name="T:Microsoft.ML.Data.MetricStatistics">
            <summary>
            The MetricsStatistics class computes summary statistics over multiple observations of a metric.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MetricStatistics.Mean">
            <summary>
            Get the mean value for the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MetricStatistics.StandardDeviation">
            <summary>
            Get the standard deviation for the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MetricStatistics.StandardError">
            <summary>
            Get the standard error of the mean for the metric.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MetricStatistics.Count">
            <summary>
            Get the count for the number of samples used. Useful for interpreting
            the standard deviation and the stardard error and building confidence intervals.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetricStatistics.Add(System.Double)">
            <summary>
            Add another metric to the set of observations.
            </summary>
            <param name="metric">The metric being accumulated</param>
        </member>
        <member name="T:Microsoft.ML.Data.IMetricsStatistics`1">
            <summary>
            This interface handles the accumulation of summary statistics over multiple observations of
            evaluation metrics.
            </summary>
            <typeparam name="T">The metric results type, such as <see cref="T:Microsoft.ML.Data.RegressionMetrics"/>.</typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.RegressionMetricsStatistics">
            <summary>
            The <see cref="T:Microsoft.ML.Data.RegressionMetricsStatistics"/> class holds summary
            statistics over multiple observations of <see cref="T:Microsoft.ML.Data.RegressionMetrics"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetricsStatistics.MeanAbsoluteError">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RegressionMetrics.MeanAbsoluteError"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetricsStatistics.MeanSquaredError">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RegressionMetrics.MeanSquaredError"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetricsStatistics.RootMeanSquaredError">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RegressionMetrics.RootMeanSquaredError"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetricsStatistics.LossFunction">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RegressionMetrics.LossFunction"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetricsStatistics.RSquared">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RegressionMetrics.RSquared"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RegressionMetricsStatistics.Microsoft#ML#Data#IMetricsStatistics{Microsoft#ML#Data#RegressionMetrics}#Add(Microsoft.ML.Data.RegressionMetrics)">
            <summary>
            Add a set of evaluation metrics to the set of observations.
            </summary>
            <param name="metrics">The observed regression evaluation metric</param>
        </member>
        <member name="T:Microsoft.ML.Data.BinaryClassificationMetricsStatistics">
            <summary>
            The <see cref="T:Microsoft.ML.Data.BinaryClassificationMetricsStatistics"/> class holds summary
            statistics over multiple observations of <see cref="T:Microsoft.ML.Data.BinaryClassificationMetrics"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.AreaUnderRocCurve">
            <summary>
            Summary Statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderRocCurve"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.Accuracy">
            <summary>
            Summary Statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.Accuracy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.PositivePrecision">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.PositivePrecision"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.PositiveRecall">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.PositiveRecall"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.NegativePrecision">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.NegativePrecision"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.NegativeRecall">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.NegativeRecall"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.F1Score">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.F1Score"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.AreaUnderPrecisionRecallCurve">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderPrecisionRecallCurve"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassificationMetricsStatistics.Microsoft#ML#Data#IMetricsStatistics{Microsoft#ML#Data#BinaryClassificationMetrics}#Add(Microsoft.ML.Data.BinaryClassificationMetrics)">
            <summary>
            Add a set of evaluation metrics to the set of observations.
            </summary>
            <param name="metrics">The observed binary classification evaluation metric</param>
        </member>
        <member name="T:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics">
            <summary>
            The <see cref="T:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics"/> class holds summary
            statistics over multiple observations of <see cref="T:Microsoft.ML.Data.MulticlassClassificationMetrics"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.MacroAccuracy">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.MacroAccuracy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.MicroAccuracy">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.MicroAccuracy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.LogLoss">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.LogLoss"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.LogLossReduction">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.LogLossReduction"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.TopKAccuracy">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracy"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.PerClassLogLoss">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.PerClassLogLoss"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationMetricsStatistics.Microsoft#ML#Data#IMetricsStatistics{Microsoft#ML#Data#MulticlassClassificationMetrics}#Add(Microsoft.ML.Data.MulticlassClassificationMetrics)">
            <summary>
            Add a set of evaluation metrics to the set of observations.
            </summary>
            <param name="metrics">The observed binary classification evaluation metric</param>
        </member>
        <member name="T:Microsoft.ML.Data.RankingMetricsStatistics">
            <summary>
            The <see cref="T:Microsoft.ML.Data.RankingMetricsStatistics"/> class holds summary
            statistics over multiple observations of <see cref="T:Microsoft.ML.Data.RankingMetrics"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RankingMetricsStatistics.DiscountedCumulativeGains">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RankingMetrics.DiscountedCumulativeGains"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RankingMetricsStatistics.NormalizedDiscountedCumulativeGains">
            <summary>
            Summary statistics for <see cref="P:Microsoft.ML.Data.RankingMetrics.NormalizedDiscountedCumulativeGains"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RankingMetricsStatistics.Microsoft#ML#Data#IMetricsStatistics{Microsoft#ML#Data#RankingMetrics}#Add(Microsoft.ML.Data.RankingMetrics)">
            <summary>
            Add a set of evaluation metrics to the set of observations.
            </summary>
            <param name="metrics">The observed regression evaluation metric</param>
        </member>
        <member name="T:Microsoft.ML.Data.NgramIdFinder">
            <summary>
            This delegate represents a function that gets an ngram as input, and outputs the id of
            the ngram and whether or not to continue processing ngrams.
            </summary>
            <param name="ngram">The array containing the ngram</param>
            <param name="lim">The ngram is stored in ngram[0],...ngram[lim-1].</param>
            <param name="icol">The index of the column the transform is applied to.</param>
            <param name="more">True if processing should continue, false if it should stop.
            It is true on input, so only needs to be set to false.</param>
            <returns>The ngram slot if it was found, -1 otherwise.</returns>
        </member>
        <member name="T:Microsoft.ML.NormalizationCatalog">
            <summary>
            Extensions for normalizer operations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.Normalize(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Normalize (rescale) several columns according to the specified <paramref name="mode"/>.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="mode">The <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode"/> used to map the old values to the new ones. </param>
            <param name="columns">The pairs of input and output columns.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Normalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Normalizer.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeMinMax(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            It normalizes the data based on the observed minimum and maximum values of the data.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumExampleCount">Maximum number of examples used to train the normalizer.</param>
            <param name="fixZero">Whether to map zero to zero, preserving sparsity.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Normalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Normalizer.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeMeanVariance(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            It normalizes the data based on the computed mean and variance of the data.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumExampleCount">Maximum number of examples used to train the normalizer.</param>
            <param name="fixZero">Whether to map zero to zero, preserving sparsity.</param>
            <param name="useCdf">Whether to use CDF as the output.</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeLogMeanVariance(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            It normalizes the data based on the computed mean and variance of the logarithm of the data.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumExampleCount">Maximum number of examples used to train the normalizer.</param>
            <param name="useCdf">Whether to use CDF as the output.</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeBinning(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean,System.Int32)">
            <summary>
            The values are assigned into bins with equal density.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumExampleCount">Maximum number of examples used to train the normalizer.</param>
            <param name="fixZero">Whether to map zero to zero, preserving sparsity.</param>
            <param name="maximumBinCount">Maximum number of bins (power of 2 recommended).</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeSupervisedBinning(Microsoft.ML.TransformsCatalog,System.String,System.String,System.String,System.Int64,System.Boolean,System.Int32,System.Int32)">
            <summary>
            The values are assigned into bins based on correlation with the <paramref name="labelColumnName"/> column.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="labelColumnName">Name of the label column for supervised binning.</param>
            <param name="maximumExampleCount">Maximum number of examples used to train the normalizer.</param>
            <param name="fixZero">Whether to map zero to zero, preserving sparsity.</param>
            <param name="maximumBinCount">Maximum number of bins (power of 2 recommended).</param>
            <param name="mininimumExamplesPerBin">Minimum number of examples per bin.</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.Normalize(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.NormalizingEstimator.ColumnOptionsBase[])">
            <summary>
            Normalize (rescale) columns according to specified custom parameters.
            </summary>
            <param name="catalog">The transform catalog</param>
            <param name="columns">The normalization settings for all the columns</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeLpNorm(Microsoft.ML.TransformsCatalog,System.String,System.String,Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction,System.Boolean)">
            <summary>
            Takes column filled with a vector of floats and normalize its <paramref name="norm"/> to one. By setting <paramref name="ensureZeroMean"/> to <see langword="true"/>,
            a pre-processing step would be applied to make the specified column's mean be a zero vector.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="norm">Type of norm to use to normalize each sample. The indicated norm of the resulted vector will be normalized to one.</param>
            <param name="ensureZeroMean">If <see langword="true"/>, subtract mean from each value before normalizing and use the raw input otherwise.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeLpNorm(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.LpNormNormalizingEstimator.ColumnOptions[])">
            <summary>
            Takes column filled with a vector of floats and normalize its norm to one. Note that the allowed norm functions are defined in <see cref="T:Microsoft.ML.Transforms.LpNormNormalizingEstimatorBase.NormFunction"/>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns"> Describes the parameters of the lp-normalization process for each column pair.</param>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeGlobalContrast(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Takes column filled with a vector of floats and computes global contrast normalization of it. By setting <paramref name="ensureZeroMean"/> to <see langword="true"/>,
            a pre-processing step would be applied to make the specified column's mean be a zero vector.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="ensureZeroMean">If <see langword="true"/>, subtract mean from each value before normalizing and use the raw input otherwise.</param>
            <param name="ensureUnitStandardDeviation">If <see langword="true"/>, resulted vector's standard deviation would be one. Otherwise, resulted vector's L2-norm would be one.</param>
            <param name="scale">Scale features by this value.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[GlobalContrastNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ProjectionTransforms.cs?range=1-6,12-112)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.NormalizationCatalog.NormalizeGlobalContrast(Microsoft.ML.TransformsCatalog,Microsoft.ML.Transforms.GlobalContrastNormalizingEstimator.ColumnOptions[])">
            <summary>
            Takes columns filled with a vector of floats and computes global contrast normalization of it.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns"> Describes the parameters of the gcn-normaliztion process for each column pair.</param>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance``1(Microsoft.ML.RegressionCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{``0},Microsoft.ML.IDataView,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Permutation Feature Importance (PFI) for Regression
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. R-squared) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible regression evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>RegressionMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance/PFIRegressionExample.cs)]
            ]]>
            </format>
            </example>
            <param name="catalog">The regression catalog.</param>
            <param name="predictionTransformer">The model on which to evaluate feature importance.</param>
            <param name="data">The evaluation data set.</param>
            <param name="labelColumnName">Label column name.</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="numberOfExamplesToUse">Limit the number of examples to evaluate on. <cref langword="null"/> means up to ~2 bln examples from <paramref param="data"/> will be used.</param>
            <param name="permutationCount">The number of permutations to perform.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance``1(Microsoft.ML.BinaryClassificationCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{``0},Microsoft.ML.IDataView,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Permutation Feature Importance (PFI) for Binary Classification
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. AUC) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible binary classification evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>BinaryClassificationMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PFI](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance/PfiBinaryClassificationExample.cs)]
            ]]>
            </format>
            </example>
            <param name="catalog">The binary classification catalog.</param>
            <param name="predictionTransformer">The model on which to evaluate feature importance.</param>
            <param name="data">The evaluation data set.</param>
            <param name="labelColumnName">Label column name.</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="numberOfExamplesToUse">Limit the number of examples to evaluate on. <cref langword="null"/> means up to ~2 bln examples from <paramref param="data"/> will be used.</param>
            <param name="permutationCount">The number of permutations to perform.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance``1(Microsoft.ML.MulticlassClassificationCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{``0},Microsoft.ML.IDataView,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Permutation Feature Importance (PFI) for MulticlassClassification
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. micro-accuracy) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible multiclass classification evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>MulticlassClassificationMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <param name="catalog">The clustering catalog.</param>
            <param name="predictionTransformer">The model on which to evaluate feature importance.</param>
            <param name="data">The evaluation data set.</param>
            <param name="labelColumnName">Label column name.</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="numberOfExamplesToUse">Limit the number of examples to evaluate on. <cref langword="null"/> means up to ~2 bln examples from <paramref param="data"/> will be used.</param>
            <param name="permutationCount">The number of permutations to perform.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="M:Microsoft.ML.PermutationFeatureImportanceExtensions.PermutationFeatureImportance``1(Microsoft.ML.RankingCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{``0},Microsoft.ML.IDataView,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Permutation Feature Importance (PFI) for Ranking
            </summary>
            <remarks>
            <para>
            Permutation feature importance (PFI) is a technique to determine the global importance of features in a trained
            machine learning model. PFI is a simple yet powerful technique motivated by Breiman in his Random Forest paper, section 10
            (Breiman. <a href='https://www.stat.berkeley.edu/~breiman/randomforest2001.pdf'>&quot;Random Forests.&quot;</a> Machine Learning, 2001.)
            The advantage of the PFI method is that it is model agnostic -- it works with any model that can be
            evaluated -- and it can use any dataset, not just the training set, to compute feature importance metrics.
            </para>
            <para>
            PFI works by taking a labeled dataset, choosing a feature, and permuting the values
            for that feature across all the examples, so that each example now has a random value for the feature and
            the original values for all other features. The evalution metric (e.g. NDCG) is then calculated
            for this modified dataset, and the change in the evaluation metric from the original dataset is computed.
            The larger the change in the evaluation metric, the more important the feature is to the model.
            PFI works by performing this permutation analysis across all the features of a model, one after another.
            </para>
            <para>
            In this implementation, PFI computes the change in all possible ranking evaluation metrics for each feature, and an
            <code>ImmutableArray</code> of <code>RankingMetrics</code> objects is returned. See the sample below for an
            example of working with these results to analyze the feature importance of a model.
            </para>
            </remarks>
            <param name="catalog">The clustering catalog.</param>
            <param name="predictionTransformer">The model on which to evaluate feature importance.</param>
            <param name="data">The evaluation data set.</param>
            <param name="labelColumnName">Label column name.</param>
            <param name="rowGroupColumnName">GroupId column name</param>
            <param name="useFeatureWeightFilter">Use features weight to pre-filter features.</param>
            <param name="numberOfExamplesToUse">Limit the number of examples to evaluate on. <cref langword="null"/> means up to ~2 bln examples from <paramref param="data"/> will be used.</param>
            <param name="permutationCount">The number of permutations to perform.</param>
            <returns>Array of per-feature 'contributions' to the score.</returns>
        </member>
        <member name="T:Microsoft.ML.TextCatalog">
            <summary>
            The catalog of text related transformations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String)">
            <summary>
            Transform a text column into featurized float array that represents counts of ngrams and char-grams.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.FeaturizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,Microsoft.ML.Transforms.Text.TextFeaturizingEstimator.Options,System.String[])">
            <summary>
            Transform several text columns into featurized float array that represents counts of ngrams and char-grams.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.</param>
            <param name="options">Advanced options to the algorithm.</param>
            <param name="inputColumnNames">Name of the columns to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/TextTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeIntoCharactersAsKeys(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Boolean)">
            <summary>
            Tokenize incoming text in <paramref name="inputColumnName"/> and output the tokens as <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02"/>, to the beginning,
            and append another marker character, <see langword="0x03"/>, to the end of the output vector of characters.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeIntoCharactersAsKeys(Microsoft.ML.TransformsCatalog.TextTransforms,System.Boolean,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Tokenize incoming text in input columns and output the tokens as output columns.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="useMarkerCharacters">Whether to prepend a marker character, <see langword="0x02"/>, to the beginning,
            and append another marker character, <see langword="0x03"/>, to the end of the output vector of characters.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.NormalizeText(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.TextNormalizingEstimator.CaseMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Normalizes incoming text in <paramref name="inputColumnName"/> by changing case, removing diacritical marks, punctuation marks and/or numbers
            and outputs new text as <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="caseMode">Casing text using the rules of the invariant culture.</param>
            <param name="keepDiacritics">Whether to keep diacritical marks or remove them.</param>
            <param name="keepPunctuations">Whether to keep punctuation marks or remove them.</param>
            <param name="keepNumbers">Whether to keep numbers or remove them.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ApplyWordEmbedding(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind)">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null" />, the value of the <paramref name="outputColumnName" /> will be used as source.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind" /> to use. </param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WordEmbeddingTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ApplyWordEmbedding(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.String)">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="customModelFile">The path of the pre-trained embeedings model to use. </param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName" />.</param>
            <param name="inputColumnName">Name of the column to transform.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WordEmbeddingTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ApplyWordEmbedding(Microsoft.ML.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind,Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.ColumnOptions[])">
            <summary>
        Word Embeddings transform is a text featurizer which converts vectors of text tokens into sentence vectors using a pre-trained model.
      </summary><remarks>
        <para>WordEmbeddings wrap different embedding models, such as GloVe. Users can specify which embedding to use. 
        The available options are various versions of <a href="https://nlp.stanford.edu/projects/glove/">GloVe Models</a>, <a href="https://en.wikipedia.org/wiki/FastText">fastText</a>, and <a href="https://anthology.aclweb.org/P/P14/P14-1146.pdf">SSWE</a>.
        </para>
        <para>Note: As WordEmbedding requires a column with text vector, for example, 'this', 'is', 'good', users need to create an input column by
          using the output_tokens=True for TextTransform to convert a column with sentences like 'This is good' into 'this', 'is', 'good'.
          The suffix of '_TransformedText' is added to the original column name to create the output token column. For instance if the input column is 'body',
          the output tokens column is named 'body_TransformedText'.</para>
        <para>
          WordEmbedding produces an output column of floats with size of 3 * dimensionality of model. For example if you use GloVe50D, which itself is 50 dimensional, we will produce 150 features.
          First 1/3rd of slots would contain minimum values of encountered embeddings, second 1/3rd will contain average values of encountered embeddings
          and last 1/3rd of slots would contain maximum values of encountered embeddings. The min/max provides a bounding hyper-rectangle for the words in the word embedding space.
          This can assist for longer phrases where the average of many words drowns out the useful signal and your label is reasonably correlated with a dimension of the embedding space.
        </para>
        <para>
          License attributes for pretrained models:
          <list type="bullet">
            <item>
              <description>
                "fastText Wikipedia 300D" by Facebook, Inc. is licensed under <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA 3.0</a> based on:
                P. Bojanowski*, E. Grave*, A. Joulin, T. Mikolov,<a href="https://arxiv.org/abs/1607.04606">Enriching Word Vectors with Subword Information</a>
                More information can be found <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md">here</a>.
              </description>
            </item>
            <item>
              <description>
                GloVe models by Stanford University, or (Jeffrey Pennington, Richard Socher, and Christopher D. Manning. 2014. 
                <a href="https://nlp.stanford.edu/pubs/glove.pdf">GloVe: Global Vectors for Word Representation</a>) is licensed under <a href="https://opendatacommons.org/licenses/pddl/1.0/">PDDL</a>.
                More information can be found <a href="https://nlp.stanford.edu/projects/glove/">here</a>. 
                Repository can be found <a href="https://github.com/stanfordnlp/GloVe">here</a>.
              </description>
          </item>
        </list>
        </para>
      </remarks>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="modelKind">The embeddings <see cref="T:Microsoft.ML.Transforms.Text.WordEmbeddingEstimator.PretrainedModelKind" /> to use. </param>
            <param name="columns">The array columns, and per-column configurations to extract embeedings from.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FeaturizeText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WordEmbeddingTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeIntoWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Char[])">
            <summary>
            Tokenizes incoming text in <paramref name="inputColumnName"/>, using <paramref name="separators"/> as separators,
            and outputs the tokens as <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="separators">The separators to use (uses space character by default).</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.TokenizeIntoWords(Microsoft.ML.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.WordTokenizingEstimator.ColumnOptions[])">
            <summary>
             Tokenizes incoming text in input columns, using per-column configurations, and outputs the tokens.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to run the tokenization on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of n-grams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LpNormalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/NgramExtraction.cs?range=1-5,11-74)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.ColumnOptions[])">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="columns.inputs.inputs"/>
            and outputs bag of word vector for each output in <paramref name="columns.output.output"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="columns">Pairs of columns to run the ngram process on.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.RemoveDefaultStopWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,Microsoft.ML.Transforms.Text.StopWordsRemovingEstimator.Language)">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName"/>
            and outputs the token streams without stopwords as <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">The column containing output text. Null means <paramref name="inputColumnName"/> is replaced.</param>
            <param name="inputColumnName">The column containing text to remove stop words on.</param>
            <param name="language">Langauge of the input text column <paramref name="inputColumnName"/>.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FastTree](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/StopWordRemoverTransform.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.RemoveStopWords(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.String[])">
            <summary>
            Removes stop words from incoming token streams in <paramref name="inputColumnName"/>
            and outputs the token streams without stopwords as <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">The column containing output text. Null means <paramref name="inputColumnName"/> is replaced.</param>
            <param name="inputColumnName">The column containing text to remove stop words on.</param>
            <param name="stopwords">Array of words to remove.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FastTree](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/StopWordRemoverTransform.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.Text.NgramExtractingEstimator.WeightingCriteria)">
            <summary>
            Produces a bag of counts of ngrams (sequences of consecutive words) in <paramref name="inputColumnNames"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.</param>
            <param name="inputColumnNames">Name of the columns to transform.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="maximumNgramsCount">Maximum number of ngrams to store in the dictionary.</param>
            <param name="weighting">Statistical measure used to evaluate how important a word is to a document in a corpus.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedWordBags(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames"/>
            and outputs bag of word vector as <paramref name="outputColumnName"/>
            </summary>
            <param name="catalog">The text-related transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.</param>
            <param name="inputColumnNames">Name of the columns to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
            <param name="ngramLength">Ngram length.</param>
            <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
            <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
            <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32,System.Boolean)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnName"/>
             and outputs ngram vector as <paramref name="outputColumnName"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
             <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
             <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
             <param name="rehashUnigrams">Whether to rehash unigrams.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Int32,System.Boolean)">
             <summary>
             Produces a bag of counts of hashed ngrams in <paramref name="inputColumnNames"/>
             and outputs ngram vector as <paramref name="outputColumnName"/>
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.</param>
             <param name="inputColumnNames">Names of the columns to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
             <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 30, inclusive.</param>
             <param name="ngramLength">Ngram length.</param>
             <param name="skipLength">Maximum number of tokens to skip when constructing an ngram.</param>
             <param name="useAllLengths">Whether to include all ngram lengths up to <paramref name="ngramLength"/> or only <paramref name="ngramLength"/>.</param>
             <param name="seed">Hashing seed.</param>
             <param name="useOrderedHashing">Whether the position of each source column should be included in the hash (when there are multiple source columns).</param>
             <param name="maximumNumberOfInverts">During hashing we constuct mappings between original values and the produced hash values.
             Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
             <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
             <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
             <param name="rehashUnigrams">Whether to rehash unigrams.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.ProduceHashedNgrams(Microsoft.ML.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions[])">
             <summary>
             Produces a bag of counts of hashed ngrams for each <paramref name="columns"/>. For each column,
             <see cref="P:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.InputColumnNames"/> are the input columns of the output column named as <see cref="F:Microsoft.ML.Transforms.Text.NgramHashingEstimator.ColumnOptions.Name"/>.
            
             <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/> is different from <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> in a way that <see cref="T:Microsoft.ML.Transforms.Text.NgramHashingEstimator"/>
             takes tokenized text as input while <see cref="T:Microsoft.ML.Transforms.Text.WordHashBagEstimator"/> tokenizes text internally.
             </summary>
             <param name="catalog">The text-related transform's catalog.</param>
             <param name="columns">Pairs of columns to compute n-grams. Note that gram indices are generated by hashing.</param>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.TransformsCatalog.TextTransforms,System.String,System.String,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="numberOfTopics">The number of topics.</param>
            <param name="alphaSum">Dirichlet prior on document-topic vectors.</param>
            <param name="beta">Dirichlet prior on vocab-topic vectors.</param>
            <param name="samplingStepCount">Number of Metropolis Hasting step.</param>
            <param name="maximumNumberOfIterations">Number of iterations.</param>
            <param name="likelihoodInterval">Compute log likelihood over local dataset on this iteration interval.</param>
            <param name="numberOfThreads">The number of training threads. Default value depends on number of logical processors.</param>
            <param name="maximumTokenCountPerDocument">The threshold of maximum count of tokens per doc.</param>
            <param name="numberOfSummaryTermsPerTopic">The number of words to summarize the topic.</param>
            <param name="numberOfBurninIterations">The number of burn-in iterations.</param>
            <param name="resetRandomGenerator">Reset the random number generator for each document.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LatentDirichletAllocation](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/LdaTransform.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextCatalog.LatentDirichletAllocation(Microsoft.ML.TransformsCatalog.TextTransforms,Microsoft.ML.Transforms.Text.LatentDirichletAllocationEstimator.ColumnOptions[])">
            <summary>
            Uses <a href="https://arxiv.org/abs/1412.1576">LightLDA</a> to transform a document (represented as a vector of floats)
            into a vector of floats over a set of topics.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Describes the parameters of LDA for each column pair.</param>
        </member>
    </members>
</doc>
